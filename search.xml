<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git SSH Key生成添加</title>
    <url>/2019/04/01/GitSSHKey%E7%94%9F%E6%88%90%E6%B7%BB%E5%8A%A0/</url>
    <content><![CDATA[<h2 id="Git-SSH-Key生成添加-假设本地已安装Git"><a href="#Git-SSH-Key生成添加-假设本地已安装Git" class="headerlink" title="Git SSH Key生成添加(假设本地已安装Git)"></a>Git SSH Key生成添加(假设本地已安装Git)</h2><h4 id="执行命令步骤："><a href="#执行命令步骤：" class="headerlink" title="执行命令步骤："></a>执行命令步骤：</h4><blockquote>
<p>1.跳转到.ssh目录；[如果没有对应的文件夹，则执行 mkdir ~/.ssh]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.设置git用户名和邮箱</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xq12345&quot;</span><br><span class="line">git config --global user.email &quot;xq12345@qq.com&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.生成SSH密钥过程;</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh-keygen -t rsa -C &quot;xq12345@qq.com&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.查看是否生成SSH密钥;[两个对应文件：id_rsa(私钥)、id_rsa.pub(公钥)]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure>
<blockquote>
<p>5.登陆远程仓库，复制id_rsa.pub里面的内容添加到远程仓库SSH keys中。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim id_rsa.pub</span><br></pre></td></tr></table></figure>
<h4 id="为什么设置SSH到远程仓库？"><a href="#为什么设置SSH到远程仓库？" class="headerlink" title="为什么设置SSH到远程仓库？"></a>为什么设置SSH到远程仓库？</h4><blockquote>
<p>使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。</p>
</blockquote>
<ul>
<li>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码，这种方法要求用户必须提供自己的公钥。</li>
</ul>
<h4 id="篇外：啥是SSH？"><a href="#篇外：啥是SSH？" class="headerlink" title="篇外：啥是SSH？"></a>篇外：啥是SSH？</h4><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p>SSH（安全外壳协议），SSH 为 Secure Shell 的缩写，SSH是一种网络协议，用于计算机之间的加密登录。</p>
</blockquote>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><blockquote>
<p>SSH能够保证安全，原因在于它采用了公钥加密。</p>
</blockquote>
<ul>
<li>传统的网络服务程序，如：ftp、pop和telnet在本质上都是不安全的，因为它们在网络上用明文传送口令和数据，别有用心的人非常容易就可以截获这些口令和数据。而且，这些服务程序的安全验证方式也是有其弱点的， 就是很容易受到“中间人”（man-in-the-middle）这种方式的攻击。所谓“中间人”的攻击方式， 就是“中间人”冒充真正的服务器接收你传给服务器的数据，然后再冒充你把数据传给真正的服务器。服务器和你之间的数据传送被“中间人”一转手做了手脚之后，就会出现很严重的问题。通过使用SSH，你可以把所有传输的数据进行加密，这样”中间人”这种攻击方式就不可能实现了，而且也能够防止DNS欺骗和IP欺骗。使用SSH，还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、PoP、甚至为PPP提供一个安全的”通道”</li>
</ul>
<h4 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h4><blockquote>
<p>SSH协议登录过程：远程主机收到用户的登录请求，把自己的公钥发给用户 –&gt; 用户使用这个公钥，将登录密码加密后，发送回来 –&gt; 远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录</p>
</blockquote>
<ul>
<li>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。<br>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的”中间人攻击”（Man-in-the-middle attack）。</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6解构</title>
    <url>/2019/03/08/ES6%E8%A7%A3%E6%9E%84/</url>
    <content><![CDATA[<h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const a = &#123;id: 1, name: &apos;a1&apos;, age: 30&#125;;</span><br><span class="line">const &#123;id, ccc&#125; = a;</span><br><span class="line">const &#123;name, ...ddd&#125; = a;</span><br><span class="line">console.log(id);    // 1</span><br><span class="line">console.log(ccc);   // undefined</span><br><span class="line">console.log(name);  // a1</span><br><span class="line">console.log(ddd);   // &#123;id: 1, age: 30&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const b = [1, 3, 5, 7, 9];</span><br><span class="line">const [, eee] = b;</span><br><span class="line">const [, ...fff] = b;</span><br><span class="line">const [, , ...ggg] = fff;</span><br><span class="line">console.log(eee);    // 3</span><br><span class="line">console.log(fff);    // [3, 5, 7, 9]</span><br><span class="line">console.log(ggg);    // [7, 9]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中的树型数据结构</title>
    <url>/2021/11/14/JavaScript%E4%B8%AD%E7%9A%84%E6%A0%91%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="JavaScript-中的树型数据结构"><a href="#JavaScript-中的树型数据结构" class="headerlink" title="JavaScript 中的树型数据结构"></a>JavaScript 中的树型数据结构</h2><p>实现和遍历技术</p>
<blockquote>
<p>作者：Anish Kumar  译者：同学小强  来源：stackfull</p>
</blockquote>
<p>Tree 是一种有趣的数据结构，它在各个领域都有广泛的应用，例如:</p>
<ul>
<li>DOM 是一种树型数据结构</li>
<li>我们操作系统中的目录和文件可以表示为树</li>
<li>家族层次结构可以表示为一棵树</li>
</ul>
<p>树有很多变体(如堆、 BST 等) ，可用于解决与调度、图像处理、数据库等相关的问题。许多复杂的问题可能看起来和树没有关系，但是实际上可以表示为一个问题。我们还将讨论这些问题(在本系列后面的部分中) ，看看树是如何使看似复杂的问题更容易理解和解决的。</p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>为二叉树实现一个<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```js</span><br><span class="line">function Node(value)&#123;</span><br><span class="line">  this.value = value</span><br><span class="line">  this.left = null</span><br><span class="line">  this.right = null</span><br><span class="line">&#125;</span><br><span class="line">// usage</span><br><span class="line">const root = new Node(2)</span><br><span class="line">root.left = new Node(1)</span><br><span class="line">root.right = new Node(3)</span><br></pre></td></tr></table></figure></p>
<p>因此，这几行代码将为我们创建一个二叉树，它看起来像这样:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">           <span class="number">2</span>  </span><br><span class="line">        /      \</span><br><span class="line">       /         \</span><br><span class="line">     <span class="number">1</span>            <span class="number">3</span></span><br><span class="line">   /   \        /    \</span><br><span class="line"><span class="literal">null</span>  <span class="literal">null</span>   <span class="literal">null</span>   <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<p>这很简单。现在，我们如何使用这个呢？</p>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>让我们从试图遍历这些连接的树节点(或整颗树)开始。就像我们可以迭代一个数组一样，如果我们也可以“迭代”树节点就更好了。然而，树并不是像数组那样的线性数据结构，因此遍历这些数据结构的方法不止一种。我们可以将遍历方法大致分为以下几类:</p>
<ul>
<li>广度优先遍历</li>
<li>深度优先遍历</li>
</ul>
<h2 id="广度优先搜索-遍历（BFS）"><a href="#广度优先搜索-遍历（BFS）" class="headerlink" title="广度优先搜索/遍历（BFS）"></a>广度优先搜索/遍历（BFS）</h2><p>在这种方法中，我们逐层遍历树。我们将从根开始，然后覆盖所有的子级，以及覆盖所有的二级子级，以此类推。例如，对于上面的树，遍历会得到如下结果:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>下面是一个略微复杂的树的例子，使得这个更容易理解:</p>
<p><img src="https://raw.githubusercontent.com/niexq/picbed/main/picgo/breadthFirstTraversal.jpeg" alt></p>
<p>要实现这种形式的遍历，我们可以使用一个队列（先进先出）数据结构。下面是整个算法的样子:</p>
<ul>
<li>初始化一个包含 root 的队列</li>
<li>从队列中删除第一项</li>
<li>将弹出项的左右子项推入队列</li>
<li>重复步骤2和3，直到队列为空</li>
</ul>
<p>下面是这个算法实现后的样子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">walkBFS</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> queue = [root]</span><br><span class="line">  <span class="keyword">while</span>(queue.length)&#123;</span><br><span class="line">      <span class="keyword">const</span> item = queue.shift()</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">      <span class="built_in">console</span>.log(item)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(item.left) queue.push(item.left)</span><br><span class="line">      <span class="keyword">if</span>(item.right) queue.push(item.right)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以稍微修改上面的算法来返回一个二维数组，其中每个内部数组代表一个包含元素的层级：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">walkBFS</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> queue = [root], ans = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(queue.length)&#123;</span><br><span class="line">      <span class="keyword">const</span> len = queue.length, level = []</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">          <span class="keyword">const</span> item = queue.shift()</span><br><span class="line">          level.push(item)</span><br><span class="line">          <span class="keyword">if</span>(item.left) queue.push(item.left)</span><br><span class="line">          <span class="keyword">if</span>(item.right) queue.push(item.right)</span><br><span class="line">       &#125;</span><br><span class="line">       ans.push(level)</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="深度优先搜索-遍历（DFS）"><a href="#深度优先搜索-遍历（DFS）" class="headerlink" title="深度优先搜索/遍历（DFS）"></a>深度优先搜索/遍历（DFS）</h2><p>在 DFS 中，我们取一个节点并继续探索它的子节点，直到深度到达完全耗尽。这可以通过以下方法之一来实现:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">root node -&gt; left node -&gt; right node <span class="comment">// pre-order traversal</span></span><br><span class="line">left node -&gt; root node -&gt; right node <span class="comment">// in-order traversal</span></span><br><span class="line">left node -&gt; right node -&gt; root node <span class="comment">// post-order traversal</span></span><br></pre></td></tr></table></figure>
<p>所有这些遍历技术都可以迭代和递归方式实现，让我们进入实现细节:</p>
<h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>下面是一颗树的前序遍历的样子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">root node -&gt; left node -&gt; right node</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7f136cbdb264645929f079b859fdaba~tplv-k3u1fbpfcp-zoom-1.image" alt></p>
<p>诀窍：<br>我们可以使用这个简单的技巧手动地找出任何树的前序遍历: 从根节点开始遍历整个树，保持自己在左边。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a39ba54c5114a7f814d83a3f257df7a~tplv-k3u1fbpfcp-zoom-1.image" alt></p>
<p>实现：<br>让我们深入研究这种遍历的实际实现。 <figure class="highlight plain"><figcaption><span>相当直观。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```js</span><br><span class="line">function walkPreOrder(root)&#123;</span><br><span class="line">  if(root === null) return</span><br><span class="line"></span><br><span class="line">  // do something here</span><br><span class="line">  console.log(root.val)</span><br><span class="line"></span><br><span class="line">  // recurse through child nodes</span><br><span class="line">  if(root.left) walkPreOrder(root.left)</span><br><span class="line">  if(root.right) walkPreOrder(root.right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>前序遍历的<figure class="highlight plain"><figcaption><span>BFS 非常相似，不同之处在于我们使用```堆栈```而不是```队列```，并且我们首先将右边的子元素放入堆栈:</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```js</span><br><span class="line">function walkPreOrder(root)&#123;</span><br><span class="line">  if(root === null) return</span><br><span class="line"></span><br><span class="line">  const stack = [root]</span><br><span class="line">  while(stack.length)&#123;</span><br><span class="line">      const item = stack.pop()</span><br><span class="line"></span><br><span class="line">      // do something</span><br><span class="line">      console.log(item)</span><br><span class="line"></span><br><span class="line">      // Left child is pushed after right one, since we want to print left child first hence it must be above right child in the stack</span><br><span class="line">      if(item.right) stack.push(item.right)</span><br><span class="line">      if(item.left) stack.push(item.left)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>下面是一颗树的中序遍历的样子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">left node -&gt; root node -&gt; right node</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/niexq/picbed/main/picgo/inorderTraversal.jpeg" alt></p>
<p>诀窍：<br>我们可以使用这个简单的技巧手动地找出任何树的中序遍历: 在树的底部水平放置一个平面镜像，并对所有节点进行投影。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9c3592d3d064c96816df911d651782b~tplv-k3u1fbpfcp-zoom-1.image" alt></p>
<p>实现：</p>
<p>递归：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">walkInOrder</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(root.left) walkInOrder(root.left)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// do something here</span></span><br><span class="line">  <span class="built_in">console</span>.log(root.val)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(root.right) walkInOrder(root.right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>迭代: 这个算法起初可能看起来有点神秘。但它相当直观的。让我们这样来看: 在中序遍历中，最左边的子节点首先被打印，然后是根节点，然后是右节点。所以我们首先想到的是:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> curr = root</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(curr)&#123;</span><br><span class="line">  <span class="keyword">while</span>(curr.left)&#123;</span><br><span class="line">    curr = curr.left <span class="comment">// get to leftmost child</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(curr) <span class="comment">// print it</span></span><br><span class="line"></span><br><span class="line">  curr = curr.right <span class="comment">// now move to right child</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述方法中，我们无法回溯，即返回到最左侧节点的父节点，所以我们需要一个堆栈来记录它们。因此，我们修订后的方法可能看起来如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stack = []</span><br><span class="line"><span class="keyword">let</span> curr = root</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(stack.length || curr)&#123;</span><br><span class="line">  <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">    stack.push(curr) <span class="comment">// keep recording the trail, to backtrack</span></span><br><span class="line">    curr = curr.left <span class="comment">// get to leftmost child</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> leftMost = stack.pop()</span><br><span class="line">  <span class="built_in">console</span>.log(leftMost) <span class="comment">// print it</span></span><br><span class="line"></span><br><span class="line">  curr = leftMost.right <span class="comment">// now move to right child</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们可以使用上面的方法来制定最终的迭代算法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">walkInOrder</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stack = []</span><br><span class="line">  <span class="keyword">let</span> current = root</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(stack.length || current)&#123;</span><br><span class="line">      <span class="keyword">while</span>(current)&#123;</span><br><span class="line">         stack.push(current)</span><br><span class="line">         current = current.left</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> last = stack.pop()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">      <span class="built_in">console</span>.log(last)</span><br><span class="line"></span><br><span class="line">      current = last.right</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>下面是一颗树的后序遍历的样子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">left node -&gt; right node -&gt; root node</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4ab8c4c7dee41da9ac6c60deb15d872~tplv-k3u1fbpfcp-zoom-1.image" alt></p>
<p>诀窍：</p>
<p>对于任何树的快速手动后序遍历：一个接一个地提取所有最左边的叶节点。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c94ae0809d16472c8fab5c94350fb421~tplv-k3u1fbpfcp-zoom-1.image" alt></p>
<p>实现：</p>
<p>让我们深入研究这种遍历的实际实现。</p>
<p>递归：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">walkPostOrder</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(root.left) walkPostOrder(root.left)</span><br><span class="line">  <span class="keyword">if</span>(root.right) walkPostOrder(root.right)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do something here</span></span><br><span class="line">  <span class="built_in">console</span>.log(root.val)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>迭代：我们已经有了用于前序遍历的迭代算法。 我们可以用那个吗？ 由于后序遍历似乎只是前序遍历的逆序。 让我们来看看：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PreOrder:</span></span><br><span class="line">root -&gt; left -&gt; right</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reverse of PreOrder:</span></span><br><span class="line">right -&gt; left -&gt; root</span><br><span class="line"></span><br><span class="line"><span class="comment">// But PostOrder is:</span></span><br><span class="line">left -&gt; right -&gt; root</span><br></pre></td></tr></table></figure>
<p>这里有一个细微的区别。但是我们可以通过稍微修改前序算法，然后对其进行逆序，从而得到后序结果。总体算法如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// record result using </span></span><br><span class="line">root -&gt; right -&gt; left</span><br><span class="line"></span><br><span class="line"><span class="comment">// reverse result</span></span><br><span class="line">left -&gt; right -&gt; root</span><br></pre></td></tr></table></figure>
<ul>
<li><p>使用与上面的迭代前序算法类似的方法，使用临时<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ 唯一的例外是我们使用 ```root-&gt; right-&gt; left``` 而不是 ```root-&gt; left-&gt; right</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>将遍历序列记录在一个数组<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ ```结果```的逆序给出了后序遍历</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">function walkPostOrder(root)&#123;</span><br><span class="line">  if(root === null) return []</span><br><span class="line"></span><br><span class="line">  const tempStack = [root], result = []</span><br><span class="line"></span><br><span class="line">  while(tempStack.length)&#123;</span><br><span class="line">      const last = tempStack.pop()</span><br><span class="line"></span><br><span class="line">      result.push(last)</span><br><span class="line"></span><br><span class="line">      if(last.left) tempStack.push(last.left)</span><br><span class="line">      if(last.right) tempStack.push(last.right)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result.reverse()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</li>
</ul>
<h2 id="额外：JavaScript-提示"><a href="#额外：JavaScript-提示" class="headerlink" title="额外：JavaScript 提示"></a>额外：JavaScript 提示</h2><p>如果我们可以通过以下方式遍历树该多好：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> node <span class="keyword">of</span> walkPreOrder(tree) )&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(node)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看起来真的很好，而且很容易阅读，不是吗？ 我们所要做的就是使用一个 <figure class="highlight plain"><figcaption><span>函数，它会返回一个迭代器。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">以下是我们如何修改上面的 ```walkPreOrder``` 函数，使其按照上面共享的示例运行：</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">function* walkPreOrder(root)&#123;</span><br><span class="line">   if(root === null) return</span><br><span class="line"></span><br><span class="line">  const stack = [root]</span><br><span class="line">  while(stack.length)&#123;</span><br><span class="line">      const item = stack.pop()</span><br><span class="line">      yield item</span><br><span class="line">      if(item.right) stack.push(item.right)</span><br><span class="line">      if(item.left) stack.push(item.left)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="推荐理由"><a href="#推荐理由" class="headerlink" title="推荐理由"></a>推荐理由</h2><p>本文（配有多图）介绍了树结构在 JavaScript 语言里面如何遍历，写得浅显易懂，解释了广度优先、深度优先等多种方法的实现，翻译难免有出入，欢迎斧正！</p>
<p>原文：<a href="https://stackfull.dev/tree-data-structure-in-javascript" target="_blank" rel="noopener">https://stackfull.dev/tree-data-structure-in-javascript</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Commit message更优雅的操作</title>
    <url>/2019/04/12/GitCommitmessage%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="Git-Commit-message更优雅的操作"><a href="#Git-Commit-message更优雅的操作" class="headerlink" title="Git Commit message更优雅的操作"></a>Git Commit message更优雅的操作</h4><p>优雅的Commit message对团队协作开发及其重要。</p>
<p>Git每次提交代码，都要写 Commit message，否则提交不了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;hello world&quot;</span><br></pre></td></tr></table></figure></p>
<p>上面代码的<span style="padding:2px;border-radius:5px;width:auto;background: pink">-m</span>参数，就是用来指定 commit message 的。</p>
<p>如果一行不够，可以只执行<span style="padding:2px;border-radius:5px;width:auto;background: pink">git commit</span>，就会跳出文本编辑器，让你写多行。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit</span><br></pre></td></tr></table></figure></p>
<p>基本上，你写什么都行（<a href="http://www.commitlogsfromlastnight.com/" target="_blank" rel="noopener">这里</a>，<a href="http://blog.no-panic.at/2014/10/20/funny-initial-git-commit-messages/" target="_blank" rel="noopener">这里</a>和<a href="http://whatthecommit.com/" target="_blank" rel="noopener">这里</a>）。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016010601.png" alt="png1"></p>
<p>但是，一般来说，commit message 应该清晰明了，说明本次提交的目的。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016010602.png" alt="png2"></p>
<p>目前，社区有多种 Commit message 的<a href="https://github.com/conventional-changelog/conventional-changelog/blob/master/conventions" target="_blank" rel="noopener">写法规范</a>。<br>本文介绍<a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0" target="_blank" rel="noopener">Angular 规范</a>（见上图），这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。</p>
<h6 id="1、Commit-message-的作用"><a href="#1、Commit-message-的作用" class="headerlink" title="1、Commit message 的作用"></a>1、Commit message 的作用</h6><p>格式化的Commit message，有几个好处。</p>
<ul>
<li>1.1 提供更多的历史信息，方便快速浏览。</li>
</ul>
<p>比如，下面的命令显示上次发布后的变动，每个commit占据一行。你只看行首，就知道某次 commit 的目的。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log &lt;last tag&gt; HEAD --pretty=format:%s</span><br></pre></td></tr></table></figure></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016010604.png" alt="png3"></p>
<ul>
<li>1.2 可以过滤某些commit（比如文档改动），便于快速查找信息。</li>
</ul>
<p>比如，下面的命令仅仅显示本次发布新增加的功能。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log &lt;last release&gt; HEAD --grep feature</span><br></pre></td></tr></table></figure></p>
<ul>
<li>1.3 可以直接从commit生成Change log。</li>
</ul>
<p>Change Log 是发布新版本时，用来说明与上一个版本差异的文档，详见后文。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016010603.png" alt="png4"></p>
<h6 id="2、Commit-message-的格式"><a href="#2、Commit-message-的格式" class="headerlink" title="2、Commit message 的格式"></a>2、Commit message 的格式</h6><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">// 空一行</span><br><span class="line">&lt;body&gt;</span><br><span class="line">// 空一行</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure></p>
<p>其中，Header 是必需的，Body 和 Footer 可以省略。</p>
<p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p>
<ul>
<li><p>2.1 Header<br>Header部分只有一行，包括三个字段：<span style="padding:2px;border-radius:5px;width:auto;background: pink">type</span>（必需）、<span style="padding:2px;border-radius:5px;width:auto;background: pink">scope</span>（可选）和<span style="padding:2px;border-radius:5px;width:auto;background: pink">subject</span>（必需）。</p>
<ul>
<li><p>2.1.1 type</p>
<p>  type用于说明 commit 的类别，只允许使用下面7个标识。</p>
  <ul><br>      <li>feat：新功能（feature）</li><br>      <li>fix：修补bug</li><br>      <li>docs：文档（documentation）</li><br>      <li>style： 格式（不影响代码运行的变动）</li><br>      <li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><br>      <li>test：增加测试</li><br>      <li>chore：构建过程或辅助工具的变动</li><br>  </ul>

<p>  如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p>
</li>
<li><p>2.1.2 scope</p>
<p>  scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>
</li>
<li><p>2.1.3 subject<br>  subject是 commit 目的的简短描述，不超过50个字符。</p>
  <ul><br>      <li>以动词开头，使用第一人称现在时，比如<code>change</code>，而不是<code>changed</code>或<code>changes</code></li><br>      <li>第一个字母小写</li><br>      <li>结尾不加句号（<code>.</code>）</li><br>  </ul>
</li>
</ul>
</li>
<li><p>2.2 Body<br>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">More detailed explanatory text, if necessary.  Wrap it to </span><br><span class="line">about 72 characters or so. </span><br><span class="line"></span><br><span class="line">Further paragraphs come after blank lines.</span><br><span class="line"></span><br><span class="line">- Bullet points are okay, too</span><br><span class="line">- Use a hanging indent</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>有两个注意点。</p>
<p>（1）使用第一人称现在时，比如使用change而不是changed或changes。</p>
<p>（2）应该说明代码变动的动机，以及与以前行为的对比。</p>
<ul>
<li><p>2.3 Footer<br>Footer 部分只用于两种情况。</p>
<ul>
<li><p>2.3.1 不兼容变动</p>
<p>  如果当前代码与上一个版本不兼容，则 Footer 部分以<span style="padding:2px;border-radius:5px;width:auto;background: pink">BREAKING CHANGE</span>开头，后面是对变动的描述、以及变动理由和迁移方法。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class="line"></span><br><span class="line">To migrate the code follow the example below:</span><br><span class="line">    </span><br><span class="line">Before:</span><br><span class="line">    </span><br><span class="line">scope: &#123;</span><br><span class="line">  myAttr: &apos;attribute&apos;,</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">After:</span><br><span class="line">    </span><br><span class="line">scope: &#123;</span><br><span class="line">  myAttr: &apos;@&apos;,</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">The removed `inject` wasn&apos;t generaly useful for directives so there should be no code using it.</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.3.2 关闭 Issue</p>
<p>  如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Closes #234</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>也可以一次关闭多个 issue 。

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Closes #123, #245, #992</span><br></pre></td></tr></table></figure>
</code></pre><ul>
<li>2.4 Revert</li>
</ul>
<p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以<span style="padding:2px;border-radius:5px;width:auto;background: pink">revert:</span>开头，后面跟着被撤销 Commit 的 Header。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">revert: feat(pencil): add &apos;graphiteWidth&apos; option</span><br><span class="line"></span><br><span class="line">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure></p>
<p>Body部分的格式是固定的，必须写成<span style="padding:2px;border-radius:5px;width:auto;background: pink">This reverts commit &lt;hash&gt;.</span>，其中的<span style="padding:2px;border-radius:5px;width:auto;background: pink">hash</span>是被撤销 commit 的 SHA 标识符。</p>
<p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的<span style="padding:2px;border-radius:5px;width:auto;background: pink">Reverts</span>小标题下面。</p>
<h6 id="3、Commitizen"><a href="#3、Commitizen" class="headerlink" title="3、Commitizen"></a>3、Commitizen</h6><p><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">Commitizen</a>是一个撰写合格 Commit message 的工具。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g commitizen</span><br></pre></td></tr></table></figure></p>
<p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure></p>
<p>以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。</p>
<p>或创建一个快捷命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;commit&quot;: &quot;npx git-cz&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016010605.png" alt="png5"></p>
<h6 id="4、validate-commit-msg"><a href="#4、validate-commit-msg" class="headerlink" title="4、validate-commit-msg"></a>4、validate-commit-msg</h6><p><a href="https://github.com/conventional-changelog-archived-repos/validate-commit-msg" target="_blank" rel="noopener">validate-commit-msg</a> 用于检查 Node 项目的 Commit message 是否符合格式。</p>
<p>它的安装是手动的。首先，拷贝下面这个<a href="https://github.com/conventional-changelog-archived-repos/validate-commit-msg/blob/master/index.js" target="_blank" rel="noopener">JS文件</a>，放入你的代码库。文件名可以取为<span style="padding:2px;border-radius:5px;width:auto;background: pink">validate-commit-msg.js</span>。</p>
<p>接着，把这个脚本加入 Git 的 hook。下面是在package.json里面使用 ghooks，把这个脚本加为commit-msg时运行。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;config&quot;: &#123;</span><br><span class="line">  &quot;ghooks&quot;: &#123;</span><br><span class="line">    &quot;commit-msg&quot;: &quot;./validate-commit-msg.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后，每次git commit的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ git add -A </span><br><span class="line">$ git commit -m &quot;edit markdown&quot; </span><br><span class="line">INVALID COMMIT MSG: does not match &quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot; ! was: edit markdown</span><br></pre></td></tr></table></figure>
<h6 id="篇外：5、生成-Change-log"><a href="#篇外：5、生成-Change-log" class="headerlink" title="篇外：5、生成 Change log"></a>篇外：5、生成 Change log</h6><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（<a href="https://github.com/conventional-changelog/conventional-changelog/blob/master/CHANGELOG.md" target="_blank" rel="noopener">例1</a>，<a href="https://github.com/karma-runner/karma/blob/master/CHANGELOG.md" target="_blank" rel="noopener">例2</a>，<a href="https://github.com/btford/grunt-conventional-changelog/blob/master/CHANGELOG.md" target="_blank" rel="noopener">例3</a>）。</p>
<p>生成的文档包括以下三个部分。</p>
<ul><br>    <li>New features</li><br>    <li>Bug fixes</li><br>    <li>Breaking changes.</li><br></ul>

<p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p>
<p><a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noopener">conventional-changelog</a> 就是生成 Change log 的工具，运行下面的命令即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g conventional-changelog</span><br><span class="line">cd my-project</span><br><span class="line">conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure>
<p>上面命令不会覆盖以前的 Change log，只会在<span style="padding:2px;border-radius:5px;width:auto;background: pink">CHANGELOG.md</span>的头部加上自从上次发布以来的变动。</p>
<p>如果你想生成所有发布的 Change log，要改为运行下面的命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conventional-changelog -p angular -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure>
<p>为了方便使用，可以将其写入package.json的scripts字段。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;changelog&quot;: &quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以后，直接运行下面的命令即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run changelog</span><br></pre></td></tr></table></figure>
<h5 id="有关更多详细信息，请参阅："><a href="#有关更多详细信息，请参阅：" class="headerlink" title="有关更多详细信息，请参阅："></a>有关更多详细信息，请参阅：</h5><p><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">本篇参阅</a></p>
<p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">git其他相关资料</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Commit</tag>
      </tags>
  </entry>
  <entry>
    <title>Flow：Facebook 的 JavaScript 静态类型检查器</title>
    <url>/2019/05/29/Facebook%E7%9A%84JavaScript%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E5%99%A8Flow/</url>
    <content><![CDATA[<h2 id="Flow：Facebook-的-JavaScript-静态类型检查器"><a href="#Flow：Facebook-的-JavaScript-静态类型检查器" class="headerlink" title="Flow：Facebook 的 JavaScript 静态类型检查器"></a>Flow：Facebook 的 JavaScript 静态类型检查器</h2><p>Flow是JavaScript代码的静态类型检查器。 它可以帮助您提高工作效率。 让您的代码更快，更智能，更自信，更大规模。</p>
<p>Flow通过静态类型注释检查代码是否存在错误。 这些类型允许您告诉Flow您希望代码如何工作，Flow将确保它以这种方式工作。</p>
<p>github地址：<a href="https://github.com/facebook/flow" target="_blank" rel="noopener">flow</a></p>
<p>flow文档地址：<a href="https://flow.org" target="_blank" rel="noopener">flow</a></p>
<hr>
<h4 id="1-从demo开始认识flow"><a href="#1-从demo开始认识flow" class="headerlink" title="1.从demo开始认识flow"></a>1.从demo开始认识flow</h4><h4 id="2-安装，配置"><a href="#2-安装，配置" class="headerlink" title="2.安装，配置"></a>2.安装，配置</h4><h4 id="3-flow总结及使用"><a href="#3-flow总结及使用" class="headerlink" title="3.flow总结及使用"></a>3.flow总结及使用</h4><hr>
<h4 id="1-从demo开始认识flow-1"><a href="#1-从demo开始认识flow-1" class="headerlink" title="1.从demo开始认识flow"></a>1.从demo开始认识flow</h4><h4 id="1-1-出入参静态类型注释"><a href="#1-1-出入参静态类型注释" class="headerlink" title="1.1 出入参静态类型注释"></a>1.1 出入参静态类型注释</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function square(n: number): number &#123;</span><br><span class="line">  return n * n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">square(&quot;2&quot;); // Error!</span><br></pre></td></tr></table></figure>
<p>报错信息：</p>
<font color="red">Error ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ common/globFile.js:26:8</font>

<p>Cannot call square with ‘2’ bound to n because string [1] is incompatible with number [2].</p>
<h4 id="1-2-运算结果类型检查"><a href="#1-2-运算结果类型检查" class="headerlink" title="1.2.运算结果类型检查"></a>1.2.运算结果类型检查</h4><p>因为Flow很好地理解JavaScript，所以它不需要很多这些类型。 你应该只需要做很少的工作来描述你的Flow代码，它将推断其余部分。 在很多时候，Flow可以完全理解您的代码而不需要任何类型<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function square(n) &#123;</span><br><span class="line">  return n * n; // Error!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">square(&quot;2&quot;);</span><br></pre></td></tr></table></figure></p>
<p>报错信息：<br>Cannot perform arithmetic operation because string [1] is not a number.</p>
<h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h4><h4 id="2-1-安装编译器"><a href="#2-1-安装编译器" class="headerlink" title="2.1 安装编译器"></a>2.1 安装编译器</h4><p>官方推荐babel或flow-remove-types<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/cli @babel/preset-flow</span><br></pre></td></tr></table></figure></p>
<p>项目增加babel.config.js文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = function() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    presets: [</span><br><span class="line">      &quot;@babel/preset-flow&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>package.json中添加scripts<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel/cli&quot;: &quot;^7.4.4&quot;,</span><br><span class="line">    &quot;@babel/preset-flow&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;babel src/ -d lib/&quot;,</span><br><span class="line">    &quot;prepublish&quot;: &quot;npm run build&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="2-2-安装flow"><a href="#2-2-安装flow" class="headerlink" title="2.2 安装flow"></a>2.2 安装flow</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev flow-bin</span><br></pre></td></tr></table></figure>
<p>package.json中添加scripts<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;flow-bin&quot;: &quot;^0.99.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;flow&quot;: &quot;flow&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生成flowconfig配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run flow init</span><br></pre></td></tr></table></figure>
<p>运行flow<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run flow</span><br></pre></td></tr></table></figure></p>
<h4 id="3-flow总结及使用-1"><a href="#3-flow总结及使用-1" class="headerlink" title="3.flow总结及使用"></a>3.flow总结及使用</h4><ul>
<li>3.1 使用<a href="https://flow.org/en/docs/usage/#toc-initialize-your-project" target="_blank" rel="noopener">flow init初始化项目</a></li>
<li>3.2 使用flow启动Flow后台进程<a href="https://flow.org/en/docs/usage/#toc-run-the-flow-background-process" target="_blank" rel="noopener">flow status</a></li>
<li>3.3 使用<a href="https://flow.org/en/docs/usage/#toc-prepare-your-code-for-flow" target="_blank" rel="noopener">// @flow</a>确定Flow将监视哪些文件</li>
<li>3.4 <a href="https://flow.org/en/docs/usage/#toc-write-flow-code" target="_blank" rel="noopener">编写flow代码</a></li>
<li>3.5 <a href="https://flow.org/en/docs/usage/#toc-check-your-code" target="_blank" rel="noopener">检查代码</a>是否存在类型错误</li>
<li>3.6 如何在代码中添加类型注释</li>
</ul>
<h4 id="3-1-使用flow-init-初始化项目"><a href="#3-1-使用flow-init-初始化项目" class="headerlink" title="3.1 使用flow init 初始化项目"></a>3.1 使用flow init 初始化项目</h4><p>生成类似INI格式，项目.flowconfig配置文件</p>
<p>3.1.1 .flowconfig由6个部分组成<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 忽略匹配文件</span><br><span class="line">[ignore]</span><br><span class="line">&lt;PROJECT_ROOT&gt;/__tests__/.*</span><br><span class="line">&lt;PROJECT_ROOT&gt;/lib/.*</span><br><span class="line"></span><br><span class="line">; 包含指定的文件或目录</span><br><span class="line">[include]</span><br><span class="line">&lt;PROJECT_ROOT&gt;/src/.*</span><br><span class="line"></span><br><span class="line">; 在类型检查代码时包含指定的库定义</span><br><span class="line">[libs]</span><br><span class="line"></span><br><span class="line">; lint</span><br><span class="line">[lints]</span><br><span class="line">all=warn</span><br><span class="line">untyped-type-import=error</span><br><span class="line">sketchy-null-bool=off</span><br><span class="line"></span><br><span class="line">; 选项</span><br><span class="line">[options]</span><br><span class="line">all=true</span><br><span class="line">esproposal.decorators=ignore</span><br><span class="line">experimental.const_params=true</span><br><span class="line">module.file_ext=.bar</span><br><span class="line">module.use_strict=true</span><br><span class="line"></span><br><span class="line">; 严格</span><br><span class="line">[strict]</span><br><span class="line">nonstrict-import</span><br><span class="line">unclear-type</span><br><span class="line">unsafe-getters-setters</span><br><span class="line">untyped-import</span><br><span class="line">untyped-type-import</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; none</span><br><span class="line">; 在声明模式下，代码没有进行类型检查，会检查文件内容</span><br><span class="line">[declarations]</span><br><span class="line">&lt;PROJECT_ROOT&gt;/third_party/.*</span><br><span class="line"></span><br><span class="line">; 不检查文件内容，不匹配指定正则表达式的类型文件，丢弃类型并将模块视为任何模块</span><br><span class="line">[untyped]</span><br><span class="line">&lt;PROJECT_ROOT&gt;/third_party/.*</span><br><span class="line"></span><br><span class="line">; 指定flow使用的版本</span><br><span class="line">[version]</span><br><span class="line">0.98.1</span><br></pre></td></tr></table></figure></p>
<p>3.1.2 # or ; or 💩 are ignored<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># This is a comment</span><br><span class="line">  # This is a comment</span><br><span class="line">; This is a comment</span><br><span class="line">  ; This is a comment</span><br><span class="line">💩 This is a comment</span><br><span class="line">  💩 This is a comment</span><br></pre></td></tr></table></figure></p>
<p>3.1.3 .flowconfig放置位置</p>
<p>.flowconfig的位置非常重要。Flow将包含.flowconfig的目录视为项目根目录。 默认情况下，Flow包含项目根目录下的所有源代码</p>
<h4 id="3-2-使用flow启动flow后台进程"><a href="#3-2-使用flow启动flow后台进程" class="headerlink" title="3.2 使用flow启动flow后台进程"></a>3.2 使用flow启动flow后台进程</h4><p>vscode推荐安装Flow Language Support<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flow status // 启动flow后台进程</span><br><span class="line">flow stop   // 终止flow后台进程</span><br></pre></td></tr></table></figure></p>
<p>webpack热加载，使用flow-webpack-plugin<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const FlowWebpackPlugin = require(&apos;flow-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &apos;development&apos;,</span><br><span class="line">  devtool: &apos;source-map&apos;,</span><br><span class="line">  entry:  &apos;./example/app.js&apos;,</span><br><span class="line">  output: &#123;</span><br><span class="line">      filename: &apos;bundle.js&apos;,</span><br><span class="line">      path: path.resolve(__dirname, &apos;./dist&apos;),</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">      hot: true,</span><br><span class="line">      disableHostCheck: true,</span><br><span class="line">      historyApiFallback: true</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">      new HtmlWebpackPlugin(&#123; template: &apos;example/index.html&apos; &#125;),</span><br><span class="line">      new FlowWebpackPlugin(&#123;</span><br><span class="line">        flowArgs: [&apos;check&apos;]</span><br><span class="line">      &#125;)</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="3-3-使用-flow确定Flow将监视哪些文件"><a href="#3-3-使用-flow确定Flow将监视哪些文件" class="headerlink" title="3.3 使用// @flow确定Flow将监视哪些文件"></a>3.3 使用// @flow确定Flow将监视哪些文件</h4><p>Flow后台进程使用此标志收集所有文件，并使用所有这些文件中提供的类型信息来确保一致性和无错误编程</p>
<p>使用JavaScript注释的形式，注释@flow<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">/* @flow */</span><br></pre></td></tr></table></figure></p>
<p>忽略//@flow，检查所有文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flow check --all</span><br></pre></td></tr></table></figure></p>
<h4 id="3-4-编写flow代码"><a href="#3-4-编写flow代码" class="headerlink" title="3.4 编写flow代码"></a>3.4 编写flow代码</h4><p>Flow后台进程将会捕获此错误<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line"></span><br><span class="line">function foo(x: ?number): string &#123;</span><br><span class="line">  if (x) &#123;</span><br><span class="line">    return x;</span><br><span class="line">  &#125;</span><br><span class="line">  return &quot;default string&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="3-5-检查代码是否存在类型错误"><a href="#3-5-检查代码是否存在类型错误" class="headerlink" title="3.5 检查代码是否存在类型错误"></a>3.5 检查代码是否存在类型错误</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># equivalent to `flow status`</span><br><span class="line">flow</span><br></pre></td></tr></table></figure>
<p>运行flow检查<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line"></span><br><span class="line">function foo(x: ?number): string &#123;</span><br><span class="line">  if (x) &#123;</span><br><span class="line">    return x;  // Cannot return `x` because  number [1] is incompatible with  string [2].</span><br><span class="line">  &#125;</span><br><span class="line">  return &quot;default string&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="3-6-如何在代码中添加类型注释"><a href="#3-6-如何在代码中添加类型注释" class="headerlink" title="3.6 如何在代码中添加类型注释"></a>3.6 如何在代码中添加类型注释</h4><p>类型注释符号<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|       // 或</span><br><span class="line">&amp;       // 且 </span><br><span class="line">?       // 可选</span><br></pre></td></tr></table></figure></p>
<p>类型注释中包括的类型<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">boolean                                 // true or new Boolean(false)</span><br><span class="line">string                                  // &quot;hello&quot; or new String(&quot;world&quot;)</span><br><span class="line">number                                  // 3.14 or new Number(42)</span><br><span class="line">null                                    // null</span><br><span class="line">undefined (void in Flow types)          // undefined</span><br><span class="line">Array (其中T用来描述数组中值的类型)     // Array&lt;T&gt;</span><br><span class="line">Object                                  // &#123;&#125;</span><br><span class="line">Function                                // function</span><br><span class="line">class                                   // class</span><br><span class="line">Symbols (not yet supported in Flow)     // Symbol(&quot;foo&quot;)</span><br></pre></td></tr></table></figure></p>
<p>小写<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function method(x: number, y: string, z: boolean) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">method(3.14, &quot;hello&quot;, true);</span><br></pre></td></tr></table></figure></p>
<p>大写<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function method(x: Number, y: String, z: Boolean) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">method(new Number(42), new String(&quot;world&quot;), new Boolean(false));</span><br></pre></td></tr></table></figure></p>
<p>boolean</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function acceptsBoolean(value: boolean) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">acceptsBoolean(true);  // Works!</span><br><span class="line">acceptsBoolean(false); // Works!</span><br><span class="line">acceptsBoolean(&quot;foo&quot;); // Error!</span><br></pre></td></tr></table></figure>
<p>JavaScript可以隐式地将其他类型的值转换为布尔值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (42) &#123;&#125; // 42 =&gt; true</span><br><span class="line">if (&quot;&quot;) &#123;&#125; // &quot;&quot; =&gt; false</span><br></pre></td></tr></table></figure></p>
<p>非布尔值需要显式转换为布尔类型<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function acceptsBoolean(value: boolean) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">acceptsBoolean(0);          // Error!</span><br><span class="line">acceptsBoolean(Boolean(0)); // Works!</span><br><span class="line">acceptsBoolean(!!0);        // Works!</span><br></pre></td></tr></table></figure></p>
<p>string<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function acceptsString(value: string) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">acceptsString(&quot;foo&quot;); // Works!</span><br><span class="line">acceptsString(false); // Error!</span><br></pre></td></tr></table></figure></p>
<p>JavaScript可以隐式地将其他类型的值转换为字符<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;foo&quot; + 42; // &quot;foo42&quot;</span><br><span class="line">&quot;foo&quot; + &#123;&#125;; // &quot;foo[object Object]&quot;</span><br></pre></td></tr></table></figure></p>
<p>Flow连接到字符串时只接受字符串和数字。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">&quot;foo&quot; + &quot;foo&quot;; // Works!</span><br><span class="line">&quot;foo&quot; + 42;    // Works!</span><br><span class="line">&quot;foo&quot; + &#123;&#125;;    // Error!</span><br><span class="line">&quot;foo&quot; + [];    // Error!</span><br></pre></td></tr></table></figure></p>
<p>必须明确并将其他类型转换为字符串<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">&quot;foo&quot; + String(&#123;&#125;);     // Works!</span><br><span class="line">&quot;foo&quot; + [].toString();  // Works!</span><br><span class="line">&quot;&quot; + JSON.stringify(&#123;&#125;) // Works!</span><br></pre></td></tr></table></figure></p>
<p>number</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function acceptsNumber(value: number) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">acceptsNumber(42);       // Works!</span><br><span class="line">acceptsNumber(3.14);     // Works!</span><br><span class="line">acceptsNumber(NaN);      // Works!</span><br><span class="line">acceptsNumber(Infinity); // Works!</span><br><span class="line">acceptsNumber(&quot;foo&quot;);    // Error!</span><br></pre></td></tr></table></figure>
<p>null and void<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function acceptsNull(value: null) &#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function acceptsUndefined(value: void) &#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">acceptsNull(null);           // Works!</span><br><span class="line">acceptsNull(undefined);      // Error!</span><br><span class="line">acceptsUndefined(null);      // Error!</span><br><span class="line">acceptsUndefined(undefined); // Works!</span><br></pre></td></tr></table></figure></p>
<p>Array<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr: Array&lt;number&gt; = [1, 2, 3];</span><br><span class="line">let arr1: Array&lt;boolean&gt; = [true, false, true];</span><br><span class="line">let arr2: Array&lt;string&gt; = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;];</span><br><span class="line">let arr3: Array&lt;mixed&gt; = [1, true, &quot;three&quot;]</span><br></pre></td></tr></table></figure></p>
<p>Object<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">var obj1: &#123; foo: boolean &#125; = &#123; foo: true &#125;;</span><br><span class="line">var obj2: &#123;</span><br><span class="line">  foo: number,</span><br><span class="line">  bar: boolean,</span><br><span class="line">  baz: string,</span><br><span class="line">&#125; = &#123;</span><br><span class="line">  foo: 1,</span><br><span class="line">  bar: true,</span><br><span class="line">  baz: &apos;three&apos;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>Function<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function concat(a: string, b: string): string &#123;</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">concat(&quot;foo&quot;, &quot;bar&quot;); // Works!</span><br><span class="line">// $ExpectError</span><br><span class="line">concat(true, false);  // Error!</span><br></pre></td></tr></table></figure></p>
<p>箭头Function<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let method = (str, bool, ...nums) =&gt; &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let method = (str: string, bool?: boolean, ...nums: Array&lt;number&gt;): void =&gt; &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>回调Function<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function method(callback: (error: Error | null, value: string | null) =&gt; void) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>class<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">class MyClass&lt;A, B, C&gt; &#123;</span><br><span class="line">  constructor(arg1: A, arg2: B, arg3: C) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var val: MyClass&lt;number, boolean, string&gt; = new MyClass(1, true, &apos;three&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Foo &#123;</span><br><span class="line">  serialize() &#123; return &apos;[Foo]&apos;; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Bar &#123;</span><br><span class="line">  serialize() &#123; return &apos;[Bar]&apos;; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// $ExpectError</span><br><span class="line">const foo: Foo = new Bar(); // Error!</span><br></pre></td></tr></table></figure></p>
<p>Maybe Types<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function acceptsMaybeString(value: ?string) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">acceptsMaybeString(&quot;bar&quot;);     // Works!</span><br><span class="line">acceptsMaybeString(undefined); // Works!</span><br><span class="line">acceptsMaybeString(null);      // Works!</span><br><span class="line">acceptsMaybeString();          // Works!</span><br><span class="line">acceptsMaybeString(12345);     // Error!</span><br><span class="line"></span><br><span class="line">// value: string null or undefined</span><br></pre></td></tr></table></figure></p>
<p>对象属性可选<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function acceptsObject(value: &#123; foo?: string &#125;) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">acceptsObject(&#123; foo: &quot;bar&quot; &#125;);     // Works!</span><br><span class="line">acceptsObject(&#123; foo: undefined &#125;); // Works!</span><br><span class="line">acceptsObject(&#123; foo: null &#125;);      // Error!问号放在string前不报错</span><br><span class="line">acceptsObject(&#123;&#125;);                 // Works!</span><br></pre></td></tr></table></figure></p>
<p>函数参数可选<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function acceptsOptionalString(value?: string) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">acceptsOptionalString(&quot;bar&quot;);     // Works!</span><br><span class="line">acceptsOptionalString(undefined); // Works!</span><br><span class="line">acceptsOptionalString(null);      // Error!问号放在string前不报错</span><br><span class="line">acceptsOptionalString();          // Works!</span><br></pre></td></tr></table></figure></p>
<p>带默认值的函数参数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function acceptsOptionalString(value: string = &quot;foo&quot;) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">acceptsOptionalString(&quot;bar&quot;);     // Works!</span><br><span class="line">acceptsOptionalString(undefined); // Works!</span><br><span class="line">acceptsOptionalString(null);      // Error!</span><br><span class="line">acceptsOptionalString();          // Works!</span><br></pre></td></tr></table></figure></p>
<p>使用字面文字作为类型<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function acceptsTwo(value: 2) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">acceptsTwo(2);   // Works!</span><br><span class="line">// $ExpectError</span><br><span class="line">acceptsTwo(3);   // Error!</span><br><span class="line">// $ExpectError</span><br><span class="line">acceptsTwo(&quot;2&quot;); // Error!</span><br></pre></td></tr></table></figure></p>
<p>Union Types<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function getColor(name: &quot;success&quot; | &quot;warning&quot; | &quot;danger&quot;) &#123;</span><br><span class="line">  switch (name) &#123;</span><br><span class="line">    case &quot;success&quot; : return &quot;green&quot;;</span><br><span class="line">    case &quot;warning&quot; : return &quot;yellow&quot;;</span><br><span class="line">    case &quot;danger&quot;  : return &quot;red&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getColor(&quot;success&quot;); // Works!</span><br><span class="line">getColor(&quot;danger&quot;);  // Works!</span><br><span class="line">// $ExpectError</span><br><span class="line">getColor(&quot;error&quot;);   // Error!</span><br></pre></td></tr></table></figure></p>
<p>Mixed Types<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function stringifyBasicValue(value: string | number) &#123;</span><br><span class="line">  return &apos;&apos; + value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>A type based on another type<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function identity&lt;T&gt;(value: T): T &#123;</span><br><span class="line">  return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>An arbitrary type that could be anything<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getTypeOf(value: mixed): string &#123;</span><br><span class="line">  return typeof value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Any Types<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">function add(one: any, two: any): number &#123;</span><br><span class="line">  return one + two;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(1, 2);     // Works.</span><br><span class="line">add(&quot;1&quot;, &quot;2&quot;); // Works.</span><br><span class="line">add(&#123;&#125;, []);   // Works.</span><br></pre></td></tr></table></figure></p>
<p>变量类型<br>将类型添加到变量声明<br>const let var<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">const foo /* : number */ = 1;</span><br><span class="line">const bar: number = 2;</span><br><span class="line"></span><br><span class="line">var fooVar /* : number */ = 1;</span><br><span class="line">let fooLet /* : number */ = 1;</span><br><span class="line">var barVar: number = 2;</span><br><span class="line">let barLet: number = 2;</span><br></pre></td></tr></table></figure></p>
<p>let<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let foo: number = 1;</span><br><span class="line">foo = 2;   // Works!</span><br><span class="line">// $ExpectError</span><br><span class="line">foo = &quot;3&quot;; // Error!</span><br></pre></td></tr></table></figure></p>
<p>重新分配变量<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let foo = 42;</span><br><span class="line"></span><br><span class="line">if (Math.random()) foo = true;</span><br><span class="line">if (Math.random()) foo = &quot;hello&quot;;</span><br><span class="line"></span><br><span class="line">let isOneOf: number | boolean | string = foo; // Works!</span><br></pre></td></tr></table></figure></p>
<p>重新分配变量确定变量类型<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// @flow</span><br><span class="line">let foo = 42;</span><br><span class="line">let isNumber: number = foo; // Works!</span><br><span class="line"></span><br><span class="line">foo = true;</span><br><span class="line">let isBoolean: boolean = foo; // Works!</span><br><span class="line"></span><br><span class="line">foo = &quot;hello&quot;;</span><br><span class="line">let isString: string = foo; // Works!</span><br></pre></td></tr></table></figure></p>
<p>react<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  foo: number,</span><br><span class="line">  bar?: string,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type State = &#123;</span><br><span class="line">  count: number,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyComponent extends React.Component&lt;Props&gt; &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: 0,</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    this.props.doesNotExist; // Error! You did not define a `doesNotExist` prop.</span><br><span class="line"></span><br><span class="line">    return &lt;div&gt;&#123;this.props.bar&#125;&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;MyComponent foo=&#123;42&#125; /&gt;;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Flow</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript模块化</title>
    <url>/2019/03/13/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<h4 id="what模块化？"><a href="#what模块化？" class="headerlink" title="what模块化？"></a>what模块化？</h4><p><img src="https://note.youdao.com/yws/res/3532/WEBRESOURCEcbc8a42c72ad77db1b69443dd61deb2a" alt="图片"></p>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
        <tag>Nodejs</tag>
        <tag>AMD</tag>
        <tag>CMD</tag>
      </tags>
  </entry>
  <entry>
    <title>Sequelize踩的坑</title>
    <url>/2019/03/13/Sequelize%E8%B8%A9%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<blockquote>
<p>save篇</p>
</blockquote>
<h4 id="contract-id设置了主键，save不支持赋值更改"><a href="#contract-id设置了主键，save不支持赋值更改" class="headerlink" title="contract_id设置了主键，save不支持赋值更改"></a>contract_id设置了主键，save不支持赋值更改</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let contractGood = yield models.ContractGood.findOne(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    GUID: 1333170</span><br><span class="line">  &#125;,</span><br><span class="line">  transaction: t</span><br><span class="line">&#125;);</span><br><span class="line">contractGood.contract_id = &apos;111111111111111111111111&apos;;</span><br><span class="line">yield contractGood.save(&#123; transaction: t &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="正确使用方式update或delete-contractGood-contract-id-再赋值，save操作"><a href="#正确使用方式update或delete-contractGood-contract-id-再赋值，save操作" class="headerlink" title="正确使用方式update或delete contractGood.contract_id 再赋值，save操作"></a>正确使用方式update或delete contractGood.contract_id 再赋值，save操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yield models.ContractGood.update(&#123; contract_id: &apos;22222&apos; &#125;, &#123;where: &#123;GUID: 1333170&#125;, transaction: t&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="涉及到更改主键，一定慎重"><a href="#涉及到更改主键，一定慎重" class="headerlink" title="涉及到更改主键，一定慎重"></a><font color="red">涉及到更改主键，一定慎重</font></h4>]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>Sequelize</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs项目，从.env文件加载环境变量</title>
    <url>/2019/04/01/nodejs%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BB%8E-env%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="nodejs项目，从-env文件加载环境变量，ditenv简介"><a href="#nodejs项目，从-env文件加载环境变量，ditenv简介" class="headerlink" title="nodejs项目，从.env文件加载环境变量，ditenv简介"></a>nodejs项目，从.env文件加载环境变量，<a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener">ditenv简介</a></h2><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><ul>
<li>dotenv就是一个可以使得Node.js项目，从文件中加载环境变量的NPM包。安装dotenv后，我们只需要将程序的环境变量配置写在.env文件中。其作用将.env配置文件解析为json对象，并对其中的key-value键值对通过process.env将其赋值为环境变量。之后便可通过process.env[key]，process.env.MONGO_URI获取对应环境变量。</li>
</ul>
<h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># with npm</span><br><span class="line">npm install dotenv</span><br><span class="line"></span><br><span class="line"># or with Yarn</span><br><span class="line">yarn add dotenv</span><br></pre></td></tr></table></figure>
<h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h4><ul>
<li><p>一般在项目入口文件index.js中，尽早引入dotenv</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(&apos;dotenv&apos;).config();</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目的根目录中创建.env文件，在新行中以name=value的形式添加特定于环境的变量，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MYSQL_HOST=localhost</span><br><span class="line">MYSQL_USER=root</span><br><span class="line">MYSQL_PASSWORD=xxxxxx</span><br><span class="line">MONGO_URI=user:password@localhost:27017/data_develop?authSource=admin</span><br><span class="line">MONGO_POOLSIZE=5</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在process.env拥有您在.env文件中定义的键和值, 例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const db = require(&apos;db&apos;)</span><br><span class="line">db.connect(&#123;</span><br><span class="line">  host: process.env.MYSQL_HOST,</span><br><span class="line">  username: process.env.MYSQL_USER,</span><br><span class="line">  password: process.env.MYSQL_PASSWORD</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">const mongoose = require(&apos;mongoose&apos;);</span><br><span class="line">const mongoose = require(&apos;mongoose&apos;);</span><br><span class="line">mongoose.connect(`mongodb://$&#123;process.env.MONGO_URI&#125;`, &#123;</span><br><span class="line">  poolSize: process.env.MONGO_POOLSIZE,</span><br><span class="line">  autoIndex: false</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="4-其他实用选择项"><a href="#4-其他实用选择项" class="headerlink" title="4.其他实用选择项"></a>4.其他实用选择项</h4><ul>
<li>如果包含环境变量的文件位于其他位置，则可以指定自定义路径。</li>
<li>Path，Default: path.resolve(process.cwd(), ‘.env’)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const argv = require(&apos;yargs&apos;).argv;</span><br><span class="line">require(&apos;dotenv&apos;).config(&#123;</span><br><span class="line">  path: argv.env</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="5-dotenv源码：dotenv-lib-main-js"><a href="#5-dotenv源码：dotenv-lib-main-js" class="headerlink" title="5.dotenv源码：dotenv/lib/main.js"></a>5.dotenv源码：dotenv/lib/main.js</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">const fs = require(&apos;fs&apos;)</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">function log (message /*: string */) &#123;</span><br><span class="line">  console.log(`[dotenv][DEBUG] $&#123;message&#125;`)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const NEWLINE = &apos;\n&apos;</span><br><span class="line">const RE_INI_KEY_VAL = /^\s*([\w.-]+)\s*=\s*(.*)?\s*$/</span><br><span class="line">const RE_NEWLINES = /\\n/g</span><br><span class="line"></span><br><span class="line">// Parses src into an Object</span><br><span class="line">function parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ &#123;</span><br><span class="line">  const debug = Boolean(options &amp;&amp; options.debug)</span><br><span class="line">  const obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  // convert Buffers before splitting into lines and processing</span><br><span class="line">  src.toString().split(NEWLINE).forEach(function (line, idx) &#123;</span><br><span class="line">    // matching &quot;KEY&apos; and &apos;VAL&apos; in &apos;KEY=VAL&apos;</span><br><span class="line">    const keyValueArr = line.match(RE_INI_KEY_VAL)</span><br><span class="line">    // matched?</span><br><span class="line">    if (keyValueArr != null) &#123;</span><br><span class="line">      const key = keyValueArr[1]</span><br><span class="line">      // default undefined or missing values to empty string</span><br><span class="line">      let val = (keyValueArr[2] || &apos;&apos;)</span><br><span class="line">      const end = val.length - 1</span><br><span class="line">      const isDoubleQuoted = val[0] === &apos;&quot;&apos; &amp;&amp; val[end] === &apos;&quot;&apos;</span><br><span class="line">      const isSingleQuoted = val[0] === &quot;&apos;&quot; &amp;&amp; val[end] === &quot;&apos;&quot;</span><br><span class="line"></span><br><span class="line">      // if single or double quoted, remove quotes</span><br><span class="line">      if (isSingleQuoted || isDoubleQuoted) &#123;</span><br><span class="line">        val = val.substring(1, end)</span><br><span class="line"></span><br><span class="line">        // if double quoted, expand newlines</span><br><span class="line">        if (isDoubleQuoted) &#123;</span><br><span class="line">          val = val.replace(RE_NEWLINES, NEWLINE)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        // remove surrounding whitespace</span><br><span class="line">        val = val.trim()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      obj[key] = val</span><br><span class="line">    &#125; else if (debug) &#123;</span><br><span class="line">      log(`did not match key and value when parsing line $&#123;idx + 1&#125;: $&#123;line&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Populates process.env from .env file</span><br><span class="line">function config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ &#123;</span><br><span class="line">  let dotenvPath = path.resolve(process.cwd(), &apos;.env&apos;)</span><br><span class="line">  let encoding /*: string */ = &apos;utf8&apos;</span><br><span class="line">  let debug = false</span><br><span class="line"></span><br><span class="line">  if (options) &#123;</span><br><span class="line">    if (options.path != null) &#123;</span><br><span class="line">      dotenvPath = options.path</span><br><span class="line">    &#125;</span><br><span class="line">    if (options.encoding != null) &#123;</span><br><span class="line">      encoding = options.encoding</span><br><span class="line">    &#125;</span><br><span class="line">    if (options.debug != null) &#123;</span><br><span class="line">      debug = true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  try &#123;</span><br><span class="line">    // specifying an encoding returns a string instead of a buffer</span><br><span class="line">    const parsed = parse(fs.readFileSync(dotenvPath, &#123; encoding &#125;), &#123; debug &#125;)</span><br><span class="line"></span><br><span class="line">    Object.keys(parsed).forEach(function (key) &#123;</span><br><span class="line">      if (!process.env.hasOwnProperty(key)) &#123;</span><br><span class="line">        process.env[key] = parsed[key]</span><br><span class="line">      &#125; else if (debug) &#123;</span><br><span class="line">        log(`&quot;$&#123;key&#125;&quot; is already defined in \`process.env\` and will not be overwritten`)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123; parsed &#125;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    return &#123; error: e &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports.config = config</span><br><span class="line">module.exports.parse = parse</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>reduce方法</title>
    <url>/2019/03/08/reduce%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><ul>
<li>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</li>
<li>reduce() 可以作为一个高阶函数，用于函数的 compose。</li>
<li>注意: reduce() 对于空数组是不会执行回调函数的。</li>
<li>语法：array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 数字值求和，例子1：</span><br><span class="line">var numbers = [65, 44, 12, 4];</span><br><span class="line">const getSum = (total, num) =&gt; &#123;</span><br><span class="line">    return total + num;</span><br><span class="line">&#125;</span><br><span class="line">const myFunction = (item) =&gt; &#123;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML = numbers.reduce(getSum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回对象求和，例子2：</span><br><span class="line">const func1 = (arr) =&gt; &#123;</span><br><span class="line">  return arr.reduce((moneyObj, xsd) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      sumOfYZJE: moneyObj.sumOfYZJE + xsd.YZJE,</span><br><span class="line">      sumOfWLFY: moneyObj.sumOfWLFY + xsd.WLFY,</span><br><span class="line">      sumOfJJFY: moneyObj.sumOfJJFY + xsd.JJFY,</span><br><span class="line">      sumOfZKJE: moneyObj.sumOfZKJE + xsd.ZKJE,</span><br><span class="line">      sumOfZJE: moneyObj.sumOfZJE + xsd.ZJE,</span><br><span class="line">      sumOfWSZJE: moneyObj.sumOfWSZJE + xsd.WSZJE,</span><br><span class="line">      sumOfYSZJE: moneyObj.sumOfYSZJE + xsd.YSZJE,</span><br><span class="line">      sumOfWKPJE: moneyObj.sumOfWKPJE + xsd.WKPJE,</span><br><span class="line">      sumOfYKPJE: moneyObj.sumOfYKPJE + xsd.YKPJE,</span><br><span class="line">      sumOfHZJE: moneyObj.sumOfHZJE + xsd.HZJE</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, &#123;sumOfYZJE: 0,sumOfWLFY: 0,sumOfJJFY: 0,sumOfZKJE: 0,sumOfZJE: 0, sumOfWSZJE: 0, sumOfYSZJE: 0, sumOfWKPJE: 0, sumOfYKPJE: 0, sumOfHZJE: 0&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>react table rowspan小记</title>
    <url>/2019/06/26/react-table-rowspan%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="react-table-rowspan小记"><a href="#react-table-rowspan小记" class="headerlink" title="react table rowspan小记"></a>react table rowspan小记</h2><p>理解表格跨行实现，重点掌握下rowspan</p>
<h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>rowspan 属性规定单元格可横跨的行数。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;td rowspan=&quot;value&quot;&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="react代码实现"><a href="#react代码实现" class="headerlink" title="react代码实现"></a>react代码实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// react 组件部分代码</span><br><span class="line">getTableData = () =&gt; &#123;</span><br><span class="line">    const data = [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &apos;上衣&apos;,</span><br><span class="line">        children: [</span><br><span class="line">          &#123; name: &apos;红色&apos;, childChildren: [&apos;L&apos;, &apos;XL&apos;, &apos;XXL&apos;] &#125;,</span><br><span class="line">          &#123; name: &apos;白色&apos;, childChildren: [&apos;L&apos;, &apos;XL&apos;, &apos;XXL&apos;] &#125;,</span><br><span class="line">          &#123; name: &apos;黑色&apos;, childChildren: [&apos;L&apos;, &apos;XL&apos;, &apos;XXL&apos;] &#125;,</span><br><span class="line">          &#123; name: &apos;绿色&apos;, childChildren: [&apos;L&apos;, &apos;XL&apos;, &apos;XXL&apos;] &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: &apos;牛仔裤&apos;,</span><br><span class="line">        children: [</span><br><span class="line">          &#123; name: &apos;红色&apos;, childChildren: [&apos;L&apos;, &apos;XL&apos;, &apos;XXL&apos;] &#125;,</span><br><span class="line">          &#123; name: &apos;白色&apos;, childChildren: [&apos;L&apos;, &apos;XL&apos;, &apos;XXL&apos;] &#125;,</span><br><span class="line">          &#123; name: &apos;黑色&apos;, childChildren: [&apos;L&apos;, &apos;XL&apos;, &apos;XXL&apos;] &#125;,</span><br><span class="line">          &#123; name: &apos;绿色&apos;, childChildren: [&apos;L&apos;, &apos;XL&apos;, &apos;XXL&apos;] &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: &apos;鞋子&apos;,</span><br><span class="line">        children: [</span><br><span class="line">          &#123; name: &apos;红色&apos;, childChildren: [&apos;L&apos;, &apos;XL&apos;, &apos;XXL&apos;] &#125;,</span><br><span class="line">          &#123; name: &apos;白色&apos;, childChildren: [&apos;L&apos;, &apos;XL&apos;, &apos;XXL&apos;] &#125;,</span><br><span class="line">          &#123; name: &apos;黑色&apos;, childChildren: [&apos;L&apos;, &apos;XL&apos;, &apos;XXL&apos;] &#125;,</span><br><span class="line">          &#123; name: &apos;绿色&apos;, childChildren: [&apos;L&apos;, &apos;XL&apos;, &apos;XXL&apos;] &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ];</span><br><span class="line">    const rowData = [];</span><br><span class="line">    data.forEach((firstItem, firstIndex) =&gt; &#123;</span><br><span class="line">      const firstRowSpan = firstItem.children.reduce((total, curItem) =&gt; total + curItem.childChildren.length, 0);  // 重点: 第一列&quot;名称&quot;的rowspan值，取决于最小单元的行数</span><br><span class="line">      firstItem.children.forEach((secondItem, secondIndex) =&gt; &#123;</span><br><span class="line">        const secondRowSpan = secondItem.childChildren.length; // 重点: 第二列&quot;颜色&quot;的rowspan值，取决于它子集的行数（以此类推）</span><br><span class="line">        secondItem.childChildren.forEach((thirdItem, thirdIndex) =&gt; &#123;</span><br><span class="line">          const tdData = [];</span><br><span class="line">          if (secondIndex === 0 &amp;&amp; thirdIndex === 0) &#123;  // 重点：判断第一列&quot;名称&quot;是否需要插入对应dom</span><br><span class="line">            tdData.push(&lt;td className=&#123;styles.td&#125; rowSpan=&#123;firstRowSpan&#125;&gt;&#123;firstItem.name&#125;&lt;/td&gt;)</span><br><span class="line">          &#125;</span><br><span class="line">          if (thirdIndex === 0) &#123;                       // 重点：判断第二列&quot;颜色&quot;是否需要插入对应dom</span><br><span class="line">            tdData.push(&lt;td className=&#123;styles.td&#125; rowSpan=&#123;secondRowSpan&#125;&gt;&#123;secondItem.name&#125;&lt;/td&gt;)</span><br><span class="line">          &#125;</span><br><span class="line">          rowData.push((</span><br><span class="line">            &lt;tr key=&#123;`row$&#123;firstIndex&#125;$&#123;secondIndex&#125;$&#123;thirdIndex&#125;`&#125;&gt;</span><br><span class="line">              &#123;</span><br><span class="line">                tdData</span><br><span class="line">              &#125;</span><br><span class="line">              &lt;td className=&#123;styles.td&#125;&gt;&#123;thirdItem&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">          ))</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    return rowData;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;table className=&#123;styles.table&#125;&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;th className=&#123;styles.th&#125;&gt;名称&lt;/th&gt;</span><br><span class="line">            &lt;th className=&#123;styles.th&#125;&gt;颜色&lt;/th&gt;</span><br><span class="line">            &lt;th className=&#123;styles.th&#125;&gt;规格&lt;/th&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            this.getTableData()</span><br><span class="line">          &#125;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">// css</span><br><span class="line"></span><br><span class="line">table&#123;</span><br><span class="line">  border: 1px solid black !important;</span><br><span class="line">  border-bottom: 0px;</span><br><span class="line">  border-right: 0px;</span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  th&#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    padding: 6px 0;</span><br><span class="line">    border: 1px solid black !important;</span><br><span class="line">    font-size: 8px;</span><br><span class="line">    color: #4D4D4D;</span><br><span class="line">    letter-spacing: 0.11px;</span><br><span class="line">    line-height: unset!important;</span><br><span class="line">  &#125;</span><br><span class="line">  td&#123;</span><br><span class="line">    padding:6px 0;</span><br><span class="line">    border: 1px solid black !important;</span><br><span class="line">    font-size: 8px;</span><br><span class="line">    color: #4D4D4D;</span><br><span class="line">    letter-spacing: 0.11px;</span><br><span class="line">    line-height: unset!important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="个人理解图（自绘，欢迎批评指正）"><a href="#个人理解图（自绘，欢迎批评指正）" class="headerlink" title="个人理解图（自绘，欢迎批评指正）"></a>个人理解图（自绘，欢迎批评指正）</h4><p><img src="/images/rowspan.png" alt="操作效果图"></p>
<h4 id="跨行期望效果图"><a href="#跨行期望效果图" class="headerlink" title="跨行期望效果图"></a>跨行期望效果图</h4><table border="1" width="100%"><br>    <thead><br>        <tr><br>            <th>名称</th><br>            <th>颜色</th><br>            <th>规格</th><br>        </tr><br>    </thead><br>    <tbody><br>        <tr><br>          <td rowspan="12">上衣</td><br>          <td rowspan="3">红色</td><br>          <td>L</td><br>        </tr><br>        <tr><br>         <td>XL</td><br>        </tr><br>        <tr><br>          <td>XXL</td><br>        </tr><br>        <tr><br>          <td rowspan="3">白色</td><br>          <td>L</td><br>        </tr><br>        <tr><br>         <td>XL</td><br>        </tr><br>        <tr><br>          <td>XXL</td><br>        </tr><br>        <tr><br>          <td rowspan="3">黑色</td><br>          <td>L</td><br>        </tr><br>        <tr><br>         <td>XL</td><br>        </tr><br>        <tr>tabl<br>          <td>XXL</td><br>        </tr><br>        <tr><br>          <td rowspan="3">绿色</td><br>          <td>L</td><br>        </tr><br>        <tr><br>         <td>XL</td><br>        </tr><br>        <tr><br>          <td>XXL</td><br>        </tr><br>        <tr><br>          <td rowspan="12">牛仔裤</td><br>          <td rowspan="3">红色</td><br>          <td>L</td><br>        </tr><br>        <tr><br>         <td>XL</td><br>        </tr><br>        <tr><br>          <td>XXL</td><br>        </tr><br>        <tr><br>          <td rowspan="3">白色</td><br>          <td>L</td><br>        </tr><br>        <tr><br>         <td>XL</td><br>        </tr><br>        <tr><br>          <td>XXL</td><br>        </tr><br>        <tr><br>          <td rowspan="3">黑色</td><br>          <td>L</td><br>        </tr><br>        <tr><br>         <td>XL</td><br>        </tr><br>        <tr><br>          <td>XXL</td><br>        </tr><br>        <tr><br>          <td rowspan="3">绿色</td><br>          <td>L</td><br>        </tr><br>        <tr><br>         <td>XL</td><br>        </tr><br>        <tr><br>          <td>XXL</td><br>        </tr><br>    </tbody><br></table>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Reactjs</tag>
        <tag>rowspan</tag>
        <tag>table</tag>
      </tags>
  </entry>
  <entry>
    <title>setState简述</title>
    <url>/2019/04/12/setState%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="用于更新用户界面以响应事件处理器和处理服务器数据的主要方式：setState"><a href="#用于更新用户界面以响应事件处理器和处理服务器数据的主要方式：setState" class="headerlink" title="用于更新用户界面以响应事件处理器和处理服务器数据的主要方式：setState()"></a>用于更新用户界面以响应事件处理器和处理服务器数据的主要方式：setState()</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setState(updater[, callback])</span><br></pre></td></tr></table></figure>
<p>setState() 将对组件 state 的更改排入队列，并通知 React 需要使用更新后的 state 重新渲染此组件及其子组件。</p>
<p>将 setState() 视为请求而不是立即更新组件的命令。为了更好的感知性能，React 会延迟调用它，然后通过一次传递更新多个组件。React 并不会保证 state 的变更会立即生效。</p>
<p>setState() 并不总是立即更新组件，它会批量推迟更新。<strong>这使得在调用 setState() 后立即读取 this.state 成为了隐患。为了消除隐患，请使用 componentDidUpdate 或者 setState 的回调函数（setState(updater, callback)）</strong>，这两种方式都可以保证在应用更新后触发。</p>
<p>除非 shouldComponentUpdate() 返回 false，否则 setState() 将始终执行重新渲染操作。如果可变对象被使用，且无法在 shouldComponentUpdate() 中实现条件渲染，那么仅在新旧状态不一时调用 setState()可以避免不必要的重新渲染</p>
<h4 id="1-参数一为带有形参的-updater-函数："><a href="#1-参数一为带有形参的-updater-函数：" class="headerlink" title="1.参数一为带有形参的 updater 函数："></a>1.参数一为带有形参的 updater 函数：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(prevState, props) =&gt; stateChange</span><br></pre></td></tr></table></figure>
<p><strong>prevState 是对应用变化时组件状态的引用</strong>。当然，它不应直接被修改。你应该使用基于 prevState 和 props 构建的新对象来表示变化。例如，假设我们想根据 props.step 来增加 state：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.setState((prevState, props) =&gt; &#123;</span><br><span class="line">  return &#123;counter: prevState.counter + props.step&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>updater 函数中接收的 prevState 和 props 都保证为最新。updater 的返回值会与 state 进行浅合并。</strong></p>
<h4 id="2-setState-的第二个参数为可选的回调函数，它将在-setState-完成合并并重新渲染组件后执行。通常建议使用-componentDidUpdate-来代替此方式。"><a href="#2-setState-的第二个参数为可选的回调函数，它将在-setState-完成合并并重新渲染组件后执行。通常建议使用-componentDidUpdate-来代替此方式。" class="headerlink" title="2.setState() 的第二个参数为可选的回调函数，它将在 setState 完成合并并重新渲染组件后执行。通常建议使用 componentDidUpdate() 来代替此方式。"></a>2.setState() 的第二个参数为可选的回调函数，它将在 setState 完成合并并重新渲染组件后执行。通常建议使用 componentDidUpdate() 来代替此方式。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.setState((prevState, props) =&gt; &#123;</span><br><span class="line">  return &#123;counter: prevState.counter + props.step&#125;;</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">    console.log(&apos;~~~~~counter&apos;, this.state.counter); // 更新后的counter</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="3-setState-的第一个参数除了接受函数外，还可以接受对象类型："><a href="#3-setState-的第一个参数除了接受函数外，还可以接受对象类型：" class="headerlink" title="3.setState() 的第一个参数除了接受函数外，还可以接受对象类型："></a>3.setState() 的第一个参数除了接受函数外，还可以接受对象类型：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setState(stateChange[, callback])</span><br></pre></td></tr></table></figure>
<p>stateChange 会将传入的对象浅层合并到新的 state 中，例如，调整购物车商品数：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.setState(&#123;quantity: 2&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这种形式的 setState() 也是异步的，并且在同一周期内会对多个 setState 进行批处理。例如，如果在同一周期内多次设置商品数量增加，则相当于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.assign(</span><br><span class="line">  previousState,</span><br><span class="line">  &#123;quantity: state.quantity + 1&#125;,</span><br><span class="line">  &#123;quantity: state.quantity + 1&#125;,</span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>后调用的 setState() 将覆盖同一周期内先调用 setState 的值，因此商品数仅增加一次。如果后续状态取决于当前状态，建议使用 updater 函数的形式代替：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.setState((state) =&gt; &#123;</span><br><span class="line">  return &#123;quantity: state.quantity + 1&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h4 id="篇外总结"><a href="#篇外总结" class="headerlink" title="篇外总结"></a>篇外总结</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">handleGoodsImport = () =&gt; &#123;</span><br><span class="line">    this.setState(prevState =&gt; (&#123;</span><br><span class="line">      bulkGoodsOpen: !prevState.bulkGoodsOpen,</span><br><span class="line">      uploadStatus: &apos;0&apos;</span><br><span class="line">    &#125;), () =&gt; &#123;</span><br><span class="line">        console.log(&apos;~~~bulkGoodsOpen&apos;, this.state.bulkGoodsOpen)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;                   // good</span><br><span class="line">handleGoodsImport = () =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      bulkGoodsOpen: !this.state.bulkGoodsOpen,</span><br><span class="line">      uploadStatus: &apos;0&apos;</span><br><span class="line">    &#125;, () =&gt; &#123;</span><br><span class="line">        console.log(&apos;~~~bulkGoodsOpen&apos;, this.state.bulkGoodsOpen)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;                   // bad</span><br></pre></td></tr></table></figure>
<h5 id="有关更多详细信息，请参阅："><a href="#有关更多详细信息，请参阅：" class="headerlink" title="有关更多详细信息，请参阅："></a>有关更多详细信息，请参阅：</h5><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#setstate" target="_blank" rel="noopener">本篇参阅</a></p>
<p><a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html" target="_blank" rel="noopener">State 和生命周期指南</a></p>
<p><a href="https://stackoverflow.com/questions/48563650/does-react-keep-the-order-for-state-updates/48610973#48610973" target="_blank" rel="noopener">深入学习：何时以及为什么 setState() 会批量执行？</a></p>
<p><a href="https://github.com/facebook/react/issues/11527#issuecomment-360199710" target="_blank" rel="noopener">深入：为什么不直接更新 this.state？</a></p>
]]></content>
      <categories>
        <category>Reactjs</category>
      </categories>
      <tags>
        <tag>Reactjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Element.scrollIntoView()让当前的元素滚动到浏览器窗口的可视区域内</title>
    <url>/2019/07/29/scrollIntoView%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%8F%AF%E8%A7%86%E5%8C%BA%E5%9F%9F%E5%86%85/</url>
    <content><![CDATA[<h4 id="Element-scrollIntoView"><a href="#Element-scrollIntoView" class="headerlink" title="Element.scrollIntoView()"></a>Element.scrollIntoView()</h4><p>让当前的元素滚动到浏览器窗口的可视区域内</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">element.scrollIntoView();                       // 等同于element.scrollIntoView(true) </span><br><span class="line">element.scrollIntoView(alignToTop);             // Boolean型参数 </span><br><span class="line">element.scrollIntoView(scrollIntoViewOptions);  // Object型参数</span><br></pre></td></tr></table></figure>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>alignToTop(一个Boolean值)</p>
<ul>
<li>如果为true，元素的顶端将和其所在滚动区的可视区域的顶端对齐。相应的 scrollIntoViewOptions: {block: “start”, inline: “nearest”}。这是这个参数的默认值。</li>
<li>如果为false，元素的底端将和其所在滚动区的可视区域的底端对齐。相应的scrollIntoViewOptions: {block: “end”, inline: “nearest”}。</li>
</ul>
<p>scrollIntoViewOptions(可选)(一个带有选项的object)</p>
<ul>
<li>behavior(可选)<ul>
<li>定义缓动动画， “auto”, “instant”, 或 “smooth” 之一。默认为 “auto”。 </li>
</ul>
</li>
<li>block(可选)<ul>
<li>“start”, “center”, “end”, 或 “nearest”之一。默认为 “start”。</li>
</ul>
</li>
<li>inline(可选)<ul>
<li>“start”, “center”, “end”, 或 “nearest”之一。默认为 “nearest”。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    behavior: &quot;auto&quot;  | &quot;instant&quot; | &quot;smooth&quot;,</span><br><span class="line">    block:    &quot;start&quot; | &quot;end&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器兼容性<br><img src="/images/scrollIntoViewSupport.png" alt="浏览器兼容性预览图"></p>
<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var element = document.getElementById(&quot;box&quot;);</span><br><span class="line"></span><br><span class="line">element.scrollIntoView();</span><br><span class="line">element.scrollIntoView(false);</span><br><span class="line">element.scrollIntoView(&#123;block: &quot;end&quot;&#125;);</span><br><span class="line">element.scrollIntoView(&#123;behavior: &quot;instant&quot;, block: &quot;end&quot;, inline: &quot;nearest&quot;&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>取决于其它元素的布局情况，此元素可能不会完全滚动到顶端或底端。</p>
<h4 id="公司真实项目实践"><a href="#公司真实项目实践" class="headerlink" title="公司真实项目实践"></a>公司真实项目实践</h4><p>表格编辑功能，当用户选择左固定（或右固定）时，表格字段自动布局左边（或右边），滚动条滚动到对应位置。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 部分代码实现</span><br><span class="line">// 左固定Checkbox点击事件</span><br><span class="line">handleLeftCheckbox = (row, checked) =&gt; &#123;</span><br><span class="line">    row.fixed = checked ? &apos;left&apos; : &apos;&apos;;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      tableConfigs: this.state.tableConfigs,</span><br><span class="line">    &#125;, () =&gt; &#123;</span><br><span class="line">      this.scrollIntoViewData(row);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 当前设置元素滚动到浏览器窗口可视区域（getElementById可换成ref方式）</span><br><span class="line">scrollIntoViewData = (rowData) =&gt; &#123;</span><br><span class="line">    if (rowData.fixed) &#123;             // 此属性代表当前字段已设置左固定（或右固定）[左固定&apos;left&apos;\右固定&apos;right&apos;]</span><br><span class="line">      document.getElementById(`$&#123;rowData.key&#125;_$&#123;rowData.keyName&#125;`).scrollIntoView(&#123;</span><br><span class="line">        block: &apos;end&apos;,</span><br><span class="line">        inline: &apos;end&apos;,</span><br><span class="line">        behavior: &apos;smooth&apos;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>实现效果截图</p>
<p><img src="/images/intoViewProtect.png" alt="实现效果截图预览图"></p>
<h5 id="有关更多详细信息，请参阅："><a href="#有关更多详细信息，请参阅：" class="headerlink" title="有关更多详细信息，请参阅："></a>有关更多详细信息，请参阅：</h5><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView" target="_blank" rel="noopener">本篇参阅</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Reactjs</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>react组件事件绑定监听</title>
    <url>/2019/03/13/react%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E7%9B%91%E5%90%AC/</url>
    <content><![CDATA[<h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><blockquote>
<p>addEventListener() 方法用于向指定元素添加事件句柄。</p>
</blockquote>
<h4 id="element-addEventListener-event-function-useCapture"><a href="#element-addEventListener-event-function-useCapture" class="headerlink" title="element.addEventListener(event, function, useCapture)"></a>element.addEventListener(event, function, useCapture)</h4><blockquote>
<p>removeEventListener() 方法用于移除由 addEventListener() 方法添加的事件句柄。</p>
</blockquote>
<h4 id="element-removeEventListener-event-function-useCapture"><a href="#element-removeEventListener-event-function-useCapture" class="headerlink" title="element.removeEventListener(event, function, useCapture)"></a>element.removeEventListener(event, function, useCapture)</h4><h4 id="如果要移除事件句柄，addEventListener-的执行函数必须使用外部函数，如myFun，匿名函数，类似-“document-removeEventListener-“event”-function-myScript-”-该事件是无法移除的。"><a href="#如果要移除事件句柄，addEventListener-的执行函数必须使用外部函数，如myFun，匿名函数，类似-“document-removeEventListener-“event”-function-myScript-”-该事件是无法移除的。" class="headerlink" title="如果要移除事件句柄，addEventListener() 的执行函数必须使用外部函数，如myFun，匿名函数，类似 “document.removeEventListener(“event”, function(){ myScript });” 该事件是无法移除的。"></a>如果要移除事件句柄，addEventListener() 的执行函数必须使用外部函数，如myFun，匿名函数，类似 “document.removeEventListener(“event”, function(){ myScript });” 该事件是无法移除的。</h4><h4 id="场景：绑定回车事件"><a href="#场景：绑定回车事件" class="headerlink" title="场景：绑定回车事件"></a>场景：绑定回车事件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Demo extends Components&#123;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        document.addEventListener(&apos;keydown&apos;,this.handleEnterKey);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUmount()&#123;</span><br><span class="line">        document.removeEventListener(&apos;keydown&apos;,this.handleEenterKey);</span><br><span class="line">    &#125;</span><br><span class="line">    handleEnterKey = (e) =&gt; &#123;</span><br><span class="line">        if(e.keyCode === 13)&#123;</span><br><span class="line">          //do somethings</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        &lt;div&gt;hello,world!&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Reactjs</category>
      </categories>
      <tags>
        <tag>Reactjs</tag>
      </tags>
  </entry>
  <entry>
    <title>table合并单元格</title>
    <url>/2019/03/08/table%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/</url>
    <content><![CDATA[<h2 id="合并行"><a href="#合并行" class="headerlink" title="合并行"></a>合并行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;name&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;age&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;other&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt; </span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">          &lt;td rowspan=&apos;3&apos;&gt;2&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;3&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;4&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;3&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;4&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;3&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;4&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;2&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;3&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;4&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table><br>    <thead><br>        <tr><br>            <th>id</th><br>            <th>name</th><br>            <th>age</th><br>            <th>other</th><br>        </tr><br>    </thead><br>    <tbody><br>        <tr><br>            <td>1</td><br>            <td rowspan="3">2</td><br>            <td>3</td><br>            <td>4</td><br>        </tr><br>        <tr><br>            <td>1</td><br>            <td>3</td><br>            <td>4</td><br>        </tr><br>        <tr><br>            <td>1</td><br>            <td>3</td><br>            <td>4</td><br>        </tr><br>        <tr><br>            <td>1</td><br>            <td>2</td><br>            <td>3</td><br>            <td>4</td><br>        </tr><br>    </tbody><br></table>

<h2 id="合并列"><a href="#合并列" class="headerlink" title="合并列"></a>合并列</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;name&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;age&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;other&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">            &lt;td colspan=&apos;2&apos;&gt;2&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;3&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">            &lt;td colspan=&apos;2&apos;&gt;2&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;3&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">            &lt;td colspan=&apos;2&apos;&gt;2&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;3&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table><br>    <thead><br>        <tr><br>            <th>id</th><br>            <th>name</th><br>            <th>age</th><br>            <th>other</th><br>        </tr><br>    </thead><br>    <tbody><br>        <tr><br>            <td>1</td><br>            <td colspan="2">2</td><br>            <td>3</td><br>        </tr><br>        <tr><br>            <td>1</td><br>            <td colspan="2">2</td><br>            <td>3</td><br>        </tr><br>        <tr><br>            <td>1</td><br>            <td colspan="2">2</td><br>            <td>3</td><br>        </tr><br>    </tbody><br></table>


]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode, Ctrl + 鼠标左键实现文件跳转</title>
    <url>/2019/04/19/vscodeCtrl%E5%8A%A0%E9%BC%A0%E6%A0%87%E5%B7%A6%E9%94%AE%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<h2 id="vscode-Ctrl-鼠标左键实现文件跳转"><a href="#vscode-Ctrl-鼠标左键实现文件跳转" class="headerlink" title="vscode, Ctrl + 鼠标左键实现文件跳转"></a>vscode, Ctrl + 鼠标左键实现文件跳转</h2><h4 id="在项目根目录增加jsconfig-json文件"><a href="#在项目根目录增加jsconfig-json文件" class="headerlink" title="在项目根目录增加jsconfig.json文件"></a>在项目根目录增加jsconfig.json文件</h4><p>jsconfig.json文件配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;experimentalDecorators&quot;: true,</span><br><span class="line">    &quot;baseUrl&quot;: &quot;.&quot;,</span><br><span class="line">    &quot;paths&quot;: &#123;</span><br><span class="line">      &quot;api/*&quot;: [&quot;src/api/*&quot;],</span><br><span class="line">      &quot;components/*&quot;: [&quot;src/components/*&quot;],</span><br><span class="line">      &quot;language/*&quot;: [&quot;src/language/*&quot;],</span><br><span class="line">      &quot;lib/*&quot;: [&quot;src/lib/*&quot;],</span><br><span class="line">      &quot;mock/*&quot;: [&quot;src/mock/*&quot;],</span><br><span class="line">      &quot;routes/*&quot;: [&quot;src/routes/*&quot;],</span><br><span class="line">      &quot;static/*&quot;: [&quot;src/static/*&quot;],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;exclude&quot;: [</span><br><span class="line">    &quot;node_modules&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="配置效果图"><a href="#配置效果图" class="headerlink" title="配置效果图"></a>配置效果图</h4><p><img src="https://note.youdao.com/yws/res/865/WEBRESOURCE717d9bb6eb577a7956f5ace1d8f3f516" alt="配置效果图"></p>
<h4 id="篇外"><a href="#篇外" class="headerlink" title="篇外"></a>篇外</h4><p>注：Alt + ←（方向左键）来返回到原来的位置</p>
<h5 id="有关更多详细信息，请参阅："><a href="#有关更多详细信息，请参阅：" class="headerlink" title="有关更多详细信息，请参阅："></a>有关更多详细信息，请参阅：</h5><p><a href="https://code.visualstudio.com/docs/languages/jsconfig" target="_blank" rel="noopener">jsconfig</a></p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>不用递归生成无限层级的树</title>
    <url>/2021/07/08/%E4%B8%8D%E7%94%A8%E9%80%92%E5%BD%92%E7%94%9F%E6%88%90%E6%97%A0%E9%99%90%E5%B1%82%E7%BA%A7%E7%9A%84%E6%A0%91/</url>
    <content><![CDATA[<h2 id="不用递归生成无限层级的树"><a href="#不用递归生成无限层级的树" class="headerlink" title="不用递归生成无限层级的树"></a>不用递归生成无限层级的树</h2><p>偶然间，在技术群里聊到生成无限层级树的老话题，故此记录下，n年前一次生成无限层级树的解决方案</p>
<p><img src="https://i.loli.net/2021/07/08/DqyCBfLxAIZucN7.jpg" alt></p>
<h3 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h3><p>处理国家行政区域的树，省市区，最小颗粒到医院，后端回包平铺数据大小1M多，前端处理数据后再渲染，卡顿明显</p>
<p><img src="https://i.loli.net/2021/07/08/duURLqjbIw87Bkv.gif" alt></p>
<h3 id="后端返回的数据结构"><a href="#后端返回的数据结构" class="headerlink" title="后端返回的数据结构"></a>后端返回的数据结构</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"中华人民共和国"</span>,</span><br><span class="line">      <span class="attr">"parentId"</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1001</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"浙江省"</span>,</span><br><span class="line">      <span class="attr">"parentId"</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">2001</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"杭州市"</span>,</span><br><span class="line">      <span class="attr">"parentId"</span>: <span class="number">1001</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">3001</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"西湖区"</span>,</span><br><span class="line">      <span class="attr">"parentId"</span>: <span class="number">2001</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">4001</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"杭州市第一人民医院"</span>,</span><br><span class="line">      <span class="attr">"parentId"</span>: <span class="number">3001</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 其他略</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="第一版：递归处理树"><a href="#第一版：递归处理树" class="headerlink" title="第一版：递归处理树"></a>第一版：递归处理树</h3><p>常规处理方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 略，网上一抓一把</span></span><br></pre></td></tr></table></figure>
<h3 id="第二版：非递归处理树"><a href="#第二版：非递归处理树" class="headerlink" title="第二版：非递归处理树"></a>第二版：非递归处理树</h3><p>改进版处理方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buildTree = <span class="function">(<span class="params">itemArray, &#123; id = <span class="string">'id'</span>, parentId = <span class="string">'parentId'</span>, children = <span class="string">'children'</span>, topLevelId = <span class="string">'0'</span> &#125; = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> itemArray.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 挂载子级</span></span><br><span class="line">    item[children] = itemArray.filter(<span class="function">(<span class="params">child</span>) =&gt;</span> <span class="built_in">String</span>(item[id]) === <span class="built_in">String</span>(child[parentId]));</span><br><span class="line">    <span class="comment">// 返回顶层数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(item[parentId]) === topLevelId;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：<strong><em>O(n^2)</em></strong></p>
<h3 id="第三版：非递归处理树"><a href="#第三版：非递归处理树" class="headerlink" title="第三版：非递归处理树"></a>第三版：非递归处理树</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; groupBy &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buildTree = <span class="function">(<span class="params">itemArray, &#123; id = <span class="string">'id'</span>, parentId = <span class="string">'parentId'</span>, children = <span class="string">'children'</span>, topLevelId = <span class="string">'0'</span> &#125; = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> parentObj = groupBy(itemArray, parentId)</span><br><span class="line">  <span class="keyword">return</span> itemArray.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 挂载子级</span></span><br><span class="line">    item[children] = parentObj[item[id]];</span><br><span class="line">    <span class="comment">// 返回顶层数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(item[parentId]) === topLevelId;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：<strong><em>O(2n)</em></strong></p>
<h3 id="最终版：非递归处理树"><a href="#最终版：非递归处理树" class="headerlink" title="最终版：非递归处理树"></a>最终版：非递归处理树</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buildTree = <span class="function">(<span class="params">itemArray, &#123; id = <span class="string">'id'</span>, parentId = <span class="string">'parentId'</span>, children = <span class="string">'children'</span>, topLevelId = <span class="string">'0'</span> &#125; = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> parentMap = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 临时存储所有父级</span></span><br><span class="line">  <span class="keyword">const</span> topLevelResult = [];   <span class="comment">// 存储顶层结果</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> itemArray) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!parentMap.has(item[id])) &#123;</span><br><span class="line">      item[children] = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      item[children] = parentMap.get(item[id])[children];</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    parentMap.set(item.id, item)</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">if</span>(!parentMap.has(item[parentId])) &#123;</span><br><span class="line">      parentMap.set(item[parentId], &#123;</span><br><span class="line">        [children]: []</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    parentMap.get(item[parentId])[children].push(item)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">String</span>(item[parentId]) === <span class="built_in">String</span>(topLevelId)) &#123;</span><br><span class="line">      topLevelResult.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> topLevelResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：<strong><em>O(n)</em></strong></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode，根据元素标签，显示展开收起</title>
    <url>/2019/04/19/vscode%E6%8A%98%E5%8F%A0%E7%AD%96%E7%95%A5%E6%98%BE%E7%A4%BA%E5%B1%95%E5%BC%80%E6%94%B6%E8%B5%B7%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h2 id="vscode，根据元素标签，显示展开收起"><a href="#vscode，根据元素标签，显示展开收起" class="headerlink" title="vscode，根据元素标签，显示展开收起"></a>vscode，根据元素标签，显示展开收起</h2><h4 id="首选项-设置（可用图形化直接搜索，或用JSON格式显示）"><a href="#首选项-设置（可用图形化直接搜索，或用JSON格式显示）" class="headerlink" title="首选项-设置（可用图形化直接搜索，或用JSON格式显示）"></a>首选项-设置（可用图形化直接搜索，或用JSON格式显示）</h4><p>用户设置(User Settings)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;[javascript]&quot;: &#123;</span><br><span class="line">        &quot;editor.foldingStrategy&quot;: &quot;indentation&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;[javascriptreact]&quot;: &#123;</span><br><span class="line">        &quot;editor.foldingStrategy&quot;: &quot;indentation&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;[typescript]&quot;: &#123;</span><br><span class="line">        &quot;editor.foldingStrategy&quot;: &quot;indentation&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;[typescriptreact]&quot;: &#123;</span><br><span class="line">        &quot;editor.foldingStrategy&quot;: &quot;indentation&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>foldingStrategy：控制计算折叠范围的策略。<code>auto</code> 将使用语言特定的折叠策略 (若可用)。<code>indentation</code> 将使用基于缩进的折叠策略。</p>
<h4 id="配置效果图"><a href="#配置效果图" class="headerlink" title="配置效果图"></a>配置效果图</h4><p><img src="https://note.youdao.com/yws/res/871/WEBRESOURCEf1eb048f7fe84fff5a3cc0edad8ab618" alt="配置效果图"></p>
<h4 id="配置后，编码区效果图"><a href="#配置后，编码区效果图" class="headerlink" title="配置后，编码区效果图"></a>配置后，编码区效果图</h4><p><img src="https://note.youdao.com/yws/res/875/WEBRESOURCE1debfd52515fc0f876edc63532fffdd7" alt="https://note.youdao.com/yws/res/871/WEBRESOURCEf1eb048f7fe84fff5a3cc0edad8ab618"></p>
<h5 id="有关更多详细信息，请参阅："><a href="#有关更多详细信息，请参阅：" class="headerlink" title="有关更多详细信息，请参阅："></a>有关更多详细信息，请参阅：</h5><p><a href="https://code.visualstudio.com/docs/getstarted/settings" target="_blank" rel="noopener">settings</a></p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode部分常用快捷键</title>
    <url>/2019/04/19/vscode%E9%83%A8%E5%88%86%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h2 id="vscode部分常用快捷键（以官网pdf文件为主，文末附图）"><a href="#vscode部分常用快捷键（以官网pdf文件为主，文末附图）" class="headerlink" title="vscode部分常用快捷键（以官网pdf文件为主，文末附图）"></a>vscode部分常用快捷键（以官网pdf文件为主，文末附图）</h2><p>此文是vscode，windows下默认快捷方式，用户自己可通过【首选项-设置】自定义快捷方式</p>
<h4 id="1-默认快捷方式"><a href="#1-默认快捷方式" class="headerlink" title="1.默认快捷方式"></a>1.默认快捷方式</h4><font color="red"> 1、注释：</font>

<p>单行注释：[ctrl+k,ctrl+c] 或 ctrl+/</p>
<p>取消单行注释：[ctrl+k,ctrl+u] (按下ctrl不放，再按k + u)</p>
<p>多行注释：[alt+shift+A]</p>
<p>多行注释：/**</p>
<font color="red"> 2、移动行：alt+up/down </font>

<font color="red"> 3、显示/隐藏左侧目录栏 ctrl + b </font>

<font color="red"> 4、复制当前行：ctrl + c </font>

<font color="red"> 5、删除当前行：ctrl + x </font>

<font color="red"> 6、控制台终端显示与隐藏：ctrl + ~ </font>

<p>7、查找文件/安装vs code 插件地址：ctrl + p</p>
<p>8、代码格式化：shift + alt +f</p>
<font color="red"> 9、新建一个窗口 : ctrl + shift + n </font> 

<font color="red"> 10、行增加缩进: ctrl + [ </font>

<font color="red"> 11、行减少缩进: ctrl + ] </font>

<p>12、裁剪尾随空格(去掉一行的末尾那些没用的空格) : ctrl + shift + x</p>
<p>13、字体放大/缩小: ctrl + ( + 或 - )</p>
<p>14、拆分编辑器 : ctrl + 1/2/3</p>
<p>15、切换窗口 : ctrl + shift + left/right</p>
<p>16、关闭编辑器窗口 : ctrl + w</p>
<p>17、关闭所有窗口 : ctrl + k + w</p>
<p>18、切换全屏 : F11</p>
<p>19、自动换行 : alt + z</p>
<p>20、显示git : ctrl + shift + g</p>
<font color="red">21、全局查找文件：ctrl + shift + f </font>

<p>22、显示相关插件的命令(如：git log)：ctrl + shift + p</p>
<p>23、选中文字：shift + left / right / up / down</p>
<p>24、折叠代码： ctrl + k + 0-9 (0是完全折叠)</p>
<p>25、展开代码： ctrl + k + j (完全展开代码)</p>
<p>26、删除行 ： ctrl + shift + k</p>
<p>27、快速切换主题：ctrl + k / ctrl + t</p>
<font color="red"> 28、快速回到顶部 ： ctrl + home </font>

<font color="red"> 29、快速回到底部 : ctrl + end </font>

<p>30、格式化选定代码 ：ctrl + k / ctrl +f</p>
<p>31、选中代码 ： shift + 鼠标左键</p>
<p>32、多行同时添加内容（光标） ：ctrl + alt + up/down</p>
<p>33、全局替换：ctrl + shift + h</p>
<p>34、当前文件替换：ctrl + h</p>
<p>35、打开最近打开的文件：ctrl + r</p>
<p>36、打开新的命令窗：ctrl + shift + c</p>
<font color="red"> 37、打开指定文件：ctrl + p<br><br>38、新建空文件：ctrl + o<br><br>40、当前文件查找：ctrl + f </font>

<h4 id="2-官方windows下快捷方式pdf，mac下，Ctrl对应command，大部分一样"><a href="#2-官方windows下快捷方式pdf，mac下，Ctrl对应command，大部分一样" class="headerlink" title="2.官方windows下快捷方式pdf，mac下，Ctrl对应command，大部分一样"></a>2.<a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf" target="_blank" rel="noopener">官方windows下快捷方式pdf</a>，mac下，Ctrl对应command，大部分一样</h4><p><img src="https://note.youdao.com/yws/res/3493/WEBRESOURCE55adc2d71fa096f9435e281e6c7be79a" alt="官方windows下快捷方式"></p>
<h4 id="3-官方Linux下快捷方式pdf"><a href="#3-官方Linux下快捷方式pdf" class="headerlink" title="3.官方Linux下快捷方式pdf"></a>3.<a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf" target="_blank" rel="noopener">官方Linux下快捷方式pdf</a></h4><p><img src="https://note.youdao.com/yws/res/3498/WEBRESOURCE30ddb627f37fbf0ab98669f529666e57" alt="官方Linux下快捷方式"></p>
<h4 id="篇外：vscode部分插件"><a href="#篇外：vscode部分插件" class="headerlink" title="篇外：vscode部分插件"></a>篇外：vscode部分插件</h4><p>1、Auto Rename Tag 修改html标签，自动帮你完成尾部闭合标签的同步修改，和webstorm一样。</p>
<p>2、Auto Close Tag 自动闭合HTML标签</p>
<p>4、Beautiful 格式化代码的工具</p>
<p>5、Dash Dash是MacOS的API文档浏览器和代码段管理器</p>
<p>6、Ejs Snippets ejs 代码提示</p>
<p>7、ESLint 检查javascript语法错误与提示</p>
<p>8、File Navigator 快速查找文件</p>
<p>9、Git History(git log) 查看git log</p>
<p>10、Gulp Snippets 写gulp时用到，gulp语法提示。</p>
<p>11、HTML CSS Support 在HTML标签上写class智能提示当前项目所支持的样式</p>
<p>12、HTML Snippets 超级好用且初级的H5代码片段以及提示</p>
<p>13、Debug for Chrome 让vs code映射chrome的debug功能，静态页面都可以用vscode来打断点调试、配饰稍微复杂一点</p>
<p>14、Document this Js的注释模板</p>
<p>15、jQuery Code Snippets jquery提示工具</p>
<p>16、Html2jade html模板转pug模板</p>
<p>17、JS-CSS-HTML Formatter 格式化</p>
<p>18、Npm intellisense require 时的包提示工具</p>
<p>19、Open in browser 打开默认浏览器</p>
<p>20、One Dark Theme 一个vs code的主题</p>
<p>21、Path Intellisense 自动路径补全、默认不带这个功能</p>
<p>22、Project Manager 多个项目之间快速切换的工具</p>
<p>23、Pug(Jade) snippets pug语法提示</p>
<p>24、React Components 根据文件名创建反应组件代码。</p>
<p>25、React Native Tools reactNative工具类为React Native项目提供了开发环境。</p>
<p>26、Stylelint css/sass代码审查</p>
<p>27、Typings auto installer 安装vscode 的代码提示依赖库，基于typtings的</p>
<p>28、View In Browser 　默认浏览器查看HTML文件（快捷键Ctrl+F1可以修改）</p>
<font color="red">29、Vscode-icons 让vscode资源目录加上图标、必备</font>

<p>30、VueHelper Vue2代码段（包括Vue2 api、vue-router2、vuex2）</p>
<p>31、Vue 2 Snippets vue必备vue代码提示</p>
<p>32、Vue-color vue语法高亮主题</p>
<p>33、Auto-Open Markdown Preview markdown文件自动开启预览</p>
<p>34、EverMonkey 印象笔记</p>
<p>35、atom one dark atom的一个高亮主题</p>
<font color="red"> 36、SQL Server 一款命令行版操作数据库<br><br>37、 GitLens git所有操作基本都内置<br><br>38、Prettify JSON 一款JSON格式化插件<br><br>39、TODO Parser 解析项目文件中todo<br><br>（强烈推荐部分）<br></font>


<h5 id="有关更多详细信息，请参阅："><a href="#有关更多详细信息，请参阅：" class="headerlink" title="有关更多详细信息，请参阅："></a>有关更多详细信息，请参阅：</h5><p><a href="https://code.visualstudio.com/docs" target="_blank" rel="noopener">vscode</a></p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nodemailer发送邮件</title>
    <url>/2019/04/12/%E4%BD%BF%E7%94%A8nodemailer%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="使用nodemailer发送邮件"><a href="#使用nodemailer发送邮件" class="headerlink" title="使用nodemailer发送邮件"></a>使用nodemailer发送邮件</h2><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>nodemailer是一个nodejs应用的邮件服务模块</p>
<p><img src="https://nodemailer.com/nm_logo_200x136.png" alt="logo"></p>
<ul>
<li>官网地址：<a href="https://nodemailer.com" target="_blank" rel="noopener">https://nodemailer.com</a></li>
<li>GitHub地址：<a href="https://github.com/nodemailer/nodemailer" target="_blank" rel="noopener">https://github.com/nodemailer/nodemailer</a></li>
<li>本篇文档GitHub地址： <a href="https://github.com/niexq/nodemailerTest" target="_blank" rel="noopener">https://github.com/niexq/nodemailerTest</a></li>
</ul>
<h4 id="2-nodemailer功能特性"><a href="#2-nodemailer功能特性" class="headerlink" title="2.nodemailer功能特性"></a>2.nodemailer功能特性</h4><ul>
<li>支持Unicode编码,包括emoji</li>
<li>支持Window系统环境</li>
<li>支持HTML内容和纯文本内容</li>
<li>支持附件</li>
<li>支持HTML内容中嵌入图片附件</li>
<li>支持TLS/STARTTLS安全的邮件发送</li>
<li>除了支持内置的transport方法，还支持其他插件实现的transport方法</li>
<li>支持DKIM签署消息</li>
<li>支持自定义插件处理消息</li>
<li>支持XOAUTH2登录验证</li>
<li>支持SMTP连接代理</li>
<li>支持ES6</li>
<li>支持从ethereal.email自动生成的电子邮件测试帐户</li>
</ul>
<h4 id="3-要求"><a href="#3-要求" class="headerlink" title="3.要求"></a>3.要求</h4><ul>
<li>node.js v6.0.0或更高版本</li>
</ul>
<h4 id="4-安装"><a href="#4-安装" class="headerlink" title="4.安装"></a>4.安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install nodemailer --save</span><br></pre></td></tr></table></figure>
<h4 id="5-官方示例"><a href="#5-官方示例" class="headerlink" title="5.官方示例"></a>5.官方示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line">const nodemailer = require(&quot;nodemailer&quot;);</span><br><span class="line"></span><br><span class="line">// async..await is not allowed in global scope, must use a wrapper</span><br><span class="line">async function main()&#123;</span><br><span class="line"></span><br><span class="line">  // Generate test SMTP service account from ethereal.email</span><br><span class="line">  // Only needed if you don&apos;t have a real mail account for testing</span><br><span class="line">  let testAccount = await nodemailer.createTestAccount();</span><br><span class="line"></span><br><span class="line">  // create reusable transporter object using the default SMTP transport</span><br><span class="line">  let transporter = nodemailer.createTransport(&#123;</span><br><span class="line">    host: &quot;smtp.ethereal.email&quot;,</span><br><span class="line">    port: 587,</span><br><span class="line">    secure: false, // true for 465, false for other ports</span><br><span class="line">    auth: &#123;</span><br><span class="line">      user: testAccount.user, // generated ethereal user</span><br><span class="line">      pass: testAccount.pass // generated ethereal password</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // send mail with defined transport object</span><br><span class="line">  let info = await transporter.sendMail(&#123;</span><br><span class="line">    from: &apos;&quot;Fred Foo 👻&quot; &lt;foo@example.com&gt;&apos;, // sender address</span><br><span class="line">    to: &quot;bar@example.com, baz@example.com&quot;, // list of receivers</span><br><span class="line">    subject: &quot;Hello ✔&quot;, // Subject line</span><br><span class="line">    text: &quot;Hello world?&quot;, // plain text body</span><br><span class="line">    html: &quot;&lt;b&gt;Hello world?&lt;/b&gt;&quot; // html body</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  console.log(&quot;Message sent: %s&quot;, info.messageId);</span><br><span class="line">  // Message sent: &lt;b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com&gt;</span><br><span class="line"></span><br><span class="line">  // Preview only available when sending through an Ethereal account</span><br><span class="line">  console.log(&quot;Preview URL: %s&quot;, nodemailer.getTestMessageUrl(info));</span><br><span class="line">  // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main().catch(console.error);</span><br></pre></td></tr></table></figure>
<ul>
<li>这是一个生成了Ethereal的账户，发送纯文本和HTML正文电子邮件的完整示例。</li>
</ul>
<h4 id="6-使用自己qq邮箱或163邮箱发送邮件，发送多人邮箱"><a href="#6-使用自己qq邮箱或163邮箱发送邮件，发送多人邮箱" class="headerlink" title="6.使用自己qq邮箱或163邮箱发送邮件，发送多人邮箱"></a>6.使用自己qq邮箱或163邮箱发送邮件，发送多人邮箱</h4><ul>
<li>备注：使用qq邮箱发送需要<a href="https://jingyan.baidu.com/article/425e69e61e9178be15fc168a.html" target="_blank" rel="noopener">开启POP3/SMTP服务</a>，复制授权码配置在pass中。163邮箱默认已开通。</li>
<li><p>6.1 <a href="https://niexq.github.io/2019/04/01/nodejs%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BB%8E-env%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/" target="_blank" rel="noopener">.env文件配置</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RUN_LEVEL           = production</span><br><span class="line"></span><br><span class="line">MAIL_HOST           = smtp.exmail.qq.com</span><br><span class="line">MAIL_SERVICE        = QQ</span><br><span class="line">MAIL_PORT           = 465</span><br><span class="line">MAIL_SECURE         = true</span><br><span class="line">MAIL_SECURE_CONNECTION         = true</span><br><span class="line">MAIL_USER           = ******@qq.com</span><br><span class="line">MAIL_PASS           = ******</span><br><span class="line">MAIL_NICKNAME       = 👻测试nodemailer发邮件👻</span><br><span class="line">MAIL_TO             = ******@gmail.com,******@163.com,******@qq.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>6.2 config.js文件配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">const argv = require(&apos;yargs&apos;).argv;</span><br><span class="line">require(&apos;dotenv&apos;).config(&#123;</span><br><span class="line">  path: argv.env,</span><br><span class="line">&#125;);</span><br><span class="line">const env = process.env;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mail: &#123;</span><br><span class="line">    // host: env.MAIL_HOST,     // 官方demo方式，暂时注释</span><br><span class="line">    service: env.MAIL_SERVICE,  // 使用内置传输发送邮件 查看支持列表：https://nodemailer.com/smtp/well-known</span><br><span class="line">    port: env.MAIL_PORT,</span><br><span class="line">    // secure: env.MAIL_SECURE, // 官方demo方式，暂时注释</span><br><span class="line">    secureConnection: env.MAIL_SECURE_CONNECTION,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      user: env.MAIL_USER,</span><br><span class="line">      pass: env.MAIL_PASS, // 如果是使用QQ邮箱发送，此密码不是邮箱账户的密码而是授权码。</span><br><span class="line">    &#125;,</span><br><span class="line">    from: `$&#123;env.MAIL_NICKNAME&#125;&lt;$&#123;env.MAIL_USER&#125;&gt;`,</span><br><span class="line">    to: env.MAIL_TO,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>6.3 lib/sendMail.js文件配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const nodemailer = require(&apos;nodemailer&apos;);</span><br><span class="line">const mailconf = require(&apos;../config&apos;).mail;</span><br><span class="line"></span><br><span class="line">// create reusable transporter object using the default SMTP transport</span><br><span class="line">const transporter = nodemailer.createTransport(mailconf);</span><br><span class="line"></span><br><span class="line">// setup email data with unicode symbols</span><br><span class="line">const mailOptions = &#123;</span><br><span class="line">  from: mailconf.from,                          // sender address</span><br><span class="line">  to: mailconf.to,                              // list of receivers</span><br><span class="line">  subject: &apos;测试标题&apos;,                          // Subject line</span><br><span class="line">  text: &apos;Hello world?&apos;,                         // plain text body</span><br><span class="line">  html: &apos;&lt;b&gt;Hello world?&lt;/b&gt;&apos;,                  // html body</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// send mail with defined transport object</span><br><span class="line">const sendMail = (&#123; message = &apos;来自测试nodemailer发邮件&apos;, subject = &apos;这个一个默认的测试标题&apos; &#125;) =&gt; &#123;</span><br><span class="line">  if (process.env.RUN_LEVEL !== &apos;production&apos;) &#123;    // 测试环境可跳过</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  mailOptions.subject = subject;</span><br><span class="line">  mailOptions.html = `&lt;b&gt;$&#123;message&#125;&lt;/b&gt;`;</span><br><span class="line">  mailOptions.text = `$&#123;message&#125;`;</span><br><span class="line">  transporter.sendMail(mailOptions, (error, info) =&gt; &#123;</span><br><span class="line">    if (error) &#123;</span><br><span class="line">      return console.log(error);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(`发送成功，messageId为：$&#123;info.messageId&#125;`.green);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>6.4 index.js文件代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(&apos;colors&apos;);</span><br><span class="line"></span><br><span class="line">const sendMail = require(&apos;./lib/sendMail&apos;);</span><br><span class="line"></span><br><span class="line">// 使用封装好的发送邮件方法（可按项目需求，需要的地方调用此方法）</span><br><span class="line">sendMail(&#123;</span><br><span class="line">  message: &apos;这是邮件测试内容&apos;,</span><br><span class="line">  subject: &apos;邮件标题hello world&apos;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(&apos;send mail start&apos;.blue);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用163邮箱发送雷同，运行程序node index.js，成功将返回发送成功，messageId为<strong>**</strong>。</p>
</li>
</ul>
<h5 id="有关更多详细信息，请参阅："><a href="#有关更多详细信息，请参阅：" class="headerlink" title="有关更多详细信息，请参阅："></a>有关更多详细信息，请参阅：</h5><p><a href="https://nodemailer.com/smtp/" target="_blank" rel="noopener">SMTP transport</a></p>
<p><a href="https://nodemailer.com/message/configuration" target="_blank" rel="noopener">Message configuration</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2013/06/html_email.html" target="_blank" rel="noopener">HTML Email 编写指南</a></p>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>nodemailer</tag>
      </tags>
  </entry>
  <entry>
    <title>var const let作用域</title>
    <url>/2019/03/08/%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h4 id="1-与第二个情况对比"><a href="#1-与第二个情况对比" class="headerlink" title="1.与第二个情况对比"></a>1.与第二个情况对比</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const fn2 = () =&gt; &#123;</span><br><span class="line">    var a1 = 88;</span><br><span class="line">    const fn1 = () =&gt; &#123;</span><br><span class="line">    	console.log(&apos;1~~~~&apos;, a1)</span><br><span class="line">        let a1 = 999;</span><br><span class="line">    &#125;</span><br><span class="line">    fn1();</span><br><span class="line">    console.log(&apos;2~~~~&apos;,a1)</span><br><span class="line">&#125;</span><br><span class="line">fn2();</span><br><span class="line">// 第4行 VM270:4 Uncaught ReferenceError: a1 is not defined</span><br></pre></td></tr></table></figure>
<h4 id="总结：函数会从自身的活动对象开始，一层层向上寻找自己所需的变量，该函数在寻找a1时发现，自己的作用域里声明了let-它就不会再往上找，而let在声明之前是不可用的，所以就会报错"><a href="#总结：函数会从自身的活动对象开始，一层层向上寻找自己所需的变量，该函数在寻找a1时发现，自己的作用域里声明了let-它就不会再往上找，而let在声明之前是不可用的，所以就会报错" class="headerlink" title="总结：函数会从自身的活动对象开始，一层层向上寻找自己所需的变量，该函数在寻找a1时发现，自己的作用域里声明了let,它就不会再往上找，而let在声明之前是不可用的，所以就会报错"></a><strong>总结：函数会从自身的活动对象开始，一层层向上寻找自己所需的变量，该函数在寻找a1时发现，自己的作用域里声明了let,它就不会再往上找，而let在声明之前是不可用的，所以就会报错</strong></h4><h4 id="2-与第一个情况对比"><a href="#2-与第一个情况对比" class="headerlink" title="2.与第一个情况对比"></a>2.与第一个情况对比</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const fn2 = () =&gt; &#123;</span><br><span class="line">    var a1 = 88;</span><br><span class="line">    const fn1 = () =&gt; &#123;</span><br><span class="line">    	console.log(&apos;1~~~~&apos;, a1)</span><br><span class="line">        a1 = 999;</span><br><span class="line">    &#125;</span><br><span class="line">    fn1();</span><br><span class="line">    console.log(&apos;2~~~~&apos;,a1)</span><br><span class="line">&#125;</span><br><span class="line">fn2();</span><br><span class="line">// 1~~~~ 88</span><br><span class="line">// 2~~~~ 999</span><br></pre></td></tr></table></figure>
<h4 id="3-执行let-a1的时候不会报错"><a href="#3-执行let-a1的时候不会报错" class="headerlink" title="3.执行let a1的时候不会报错"></a>3.执行let a1的时候不会报错</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const fn2 = () =&gt; &#123;</span><br><span class="line">    var a1 = 88;</span><br><span class="line">    const fn1 = () =&gt; &#123;</span><br><span class="line">     let a1 = 999;</span><br><span class="line">    &#125;</span><br><span class="line">    fn1();</span><br><span class="line">    console.log(&apos;2~~~~&apos;,a1)</span><br><span class="line">&#125;</span><br><span class="line">fn2();</span><br><span class="line">// 2~~~~ 88</span><br></pre></td></tr></table></figure>
<h4 id="4-与1对比，执行let-a1的时候报错"><a href="#4-与1对比，执行let-a1的时候报错" class="headerlink" title="4.与1对比，执行let a1的时候报错"></a>4.与1对比，执行let a1的时候报错</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const fn2 = () =&gt; &#123;</span><br><span class="line">    var a1 = 88;</span><br><span class="line">    const fn1 = () =&gt; &#123;</span><br><span class="line">     var a1 = 777;</span><br><span class="line">     let a1 = 999;</span><br><span class="line">    &#125;</span><br><span class="line">    fn1();</span><br><span class="line">    console.log(&apos;2~~~~&apos;,a1)</span><br><span class="line">&#125;</span><br><span class="line">fn2();</span><br><span class="line">// 第5行 Uncaught SyntaxError: Identifier &apos;a1&apos; has already been</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>在CentOS7系统使用Docker构建Jenkins</title>
    <url>/2021/02/08/%E5%9C%A8CentOS7%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8Docker%E6%9E%84%E5%BB%BAJenkins%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="在CentOS7系统使用Docker构建Jenkins"><a href="#在CentOS7系统使用Docker构建Jenkins" class="headerlink" title="在CentOS7系统使用Docker构建Jenkins"></a>在CentOS7系统使用Docker构建Jenkins</h2><p>详情可参照<a href="https://www.jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">官方安装连接</a>，以下只记录一些关键步骤</p>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>假设docker已安装的前提下,如需了解CentOS7系统安装Docker，可参照笔记ecs操作部分步骤-<a href="https://help.aliyun.com/document_detail/51853.html?spm=a2c4g.11186623.4.1.20aa4c07DdFvHb" target="_blank" rel="noopener">安装docker</a></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li>需要了解docker基本命令操作</li>
<li>登录ecs服务器，创建jenkins挂载目录</li>
<li><a href="https://hub.docker.com/r/jenkins/jenkins" target="_blank" rel="noopener">登录dockerhub</a>,选择官方版本及阅读说明文档；也可使用docker search -s 100 ‘jenkins’直接搜索jenkins镜像start大于100的</li>
</ul>
<h3 id="设置卷位置"><a href="#设置卷位置" class="headerlink" title="设置卷位置"></a>设置卷位置</h3><p>在设置其他所有内容之前，请配置一个新的环境变量$GITLAB_HOME ，该变量指向配置，日志和数据文件将驻留的目录。确保目录存在并且已授予适当的权限。</p>
<p>对于Linux用户，将路径设置为/srv/gitlab：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> JENKINS_HOME=<span class="regexp">/srv/</span>jenkins</span><br></pre></td></tr></table></figure></p>
<p>对于macOS用户，请使用用户$HOME/gitlab目录：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> JENKINS_HOME=<span class="regexp">/srv/</span>jenkins</span><br></pre></td></tr></table></figure></p>
<p>额外加个nginx环境变量，方便jenkins shell构建使用<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> NGINX_WWW=<span class="regexp">/srv/</span>www</span><br></pre></td></tr></table></figure></p>
<p>Linux，macOS查看环境变量<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">env</span><br></pre></td></tr></table></figure></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.从docker镜像仓库拉取最新的jenkins（一般选择lts，长期支持的版本，会定时发布系统更新）（https://hub.docker.com/r/jenkins/jenkins）</span></span><br><span class="line">docker pull jenkins/jenkins:lts</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.查看已安装的docker jenkins</span></span><br><span class="line">docker images | grep <span class="string">"jenkins"</span></span><br></pre></td></tr></table></figure>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 官方配置</span></span><br><span class="line">docker run \</span><br><span class="line">  -u root \</span><br><span class="line">  --rm \                                            <span class="comment">// 关闭时自动删除Docker容器</span></span><br><span class="line">  -d \                                              <span class="comment">// 在后台运行容器（即“分离”模式）并输出容器ID</span></span><br><span class="line">  -p <span class="number">7199</span>:<span class="number">8080</span> \                                    <span class="comment">// 容器的端口映射</span></span><br><span class="line">  -p <span class="number">50000</span>:<span class="number">50000</span> \                                  <span class="comment">// 主站进行通信，容器的端口映射</span></span><br><span class="line">  --name jenkins                                    <span class="comment">// 容器名称</span></span><br><span class="line">  -v $JENKINS_HOME:<span class="regexp">/var/</span>jenkins_home \              <span class="comment">// 磁盘挂载</span></span><br><span class="line">  -v $NGINX_WWW:<span class="regexp">/srv/</span>www \                          <span class="comment">// 磁盘挂载,重要，此挂载可以达到在容器内部cp数据到host</span></span><br><span class="line">  -v /<span class="keyword">var</span>/run/docker.sock:<span class="regexp">/var/</span>run/docker.sock \    <span class="comment">// jenkins容器与Docker守护进程通信</span></span><br><span class="line">  docker.io/jenkins/jenkins:lts                     <span class="comment">// 安装的镜像包名 REPOSITORY:TAG</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 简化版</span></span><br><span class="line">docker run --name jenkins -u root -d -p <span class="number">7199</span>:<span class="number">8080</span> -p <span class="number">50000</span>:<span class="number">50000</span> -v $JENKINS_HOME:<span class="regexp">/var/</span>jenkins_home -v $NGINX_WWW:<span class="regexp">/srv/</span>www docker.io/jenkins/jenkins:lts</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看运行的容器</span></span><br><span class="line">docker container ls </span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本地访问（忽略）</span></span><br><span class="line">http:<span class="comment">//loalhost:7199</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 局域网访问（注意：可查看域名配置-设置白名单笔记，配置安全组规则，允许7199入方向）</span></span><br><span class="line">http:<span class="comment">//服务器ip:7199</span></span><br></pre></td></tr></table></figure>
<h3 id="其他，安装jenkins后设置向导"><a href="#其他，安装jenkins后设置向导" class="headerlink" title="其他，安装jenkins后设置向导"></a>其他，安装jenkins后设置向导</h3><ul>
<li>自动跳转输入管理员密码，解锁Jenkins<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首屏提示</span></span><br><span class="line">Please wait <span class="keyword">while</span> Jenkins is getting ready to work ...</span><br><span class="line">Your browser will reload automatically when Jenkins is ready.</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动跳转设置管理员密码页面</span></span><br><span class="line">解锁 Jenkins</span><br><span class="line">为了确保管理员安全地安装 Jenkins，密码已写入到日志中（不知道在哪里？）该文件在服务器上：</span><br><span class="line">/<span class="keyword">var</span>/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">请从本地复制密码并粘贴到下面。</span><br><span class="line">管理员密码</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://www.jenkins.io/zh/doc/book/resources/tutorials/setup-jenkins-01-unlock-jenkins-page.jpg" alt="管理员密码页面"></p>
<ul>
<li><p>查看登录密码</p>
<ul>
<li><p>如果您以分离模式在Docker中运行Jenkins，则可以从Docker日志（above） 访问Jenkins控制台日志</p>
</li>
<li><p>Jenkins控制台日志显示可以获取密码的位置（在Jenkins主目录中）。 必须在新Jenkins安装中的安装向导中输入此密码才能访问Jenkins的主UI。 如果您在设置向导中跳过了后续的用户创建步骤， 则此密码还可用作默认admininstrator帐户的密码（使用用户名“admin”）</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接在挂载的目录下查看，返回密码</span></span><br><span class="line">cat  /jenkins/secrets/initialAdminPassword</span><br><span class="line"><span class="comment">// 进入容器内部获取密码</span></span><br><span class="line">docker exec -it <span class="string">"容器ID"</span> bash</span><br><span class="line">cat /<span class="keyword">var</span>/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>
<ul>
<li>直接粘贴到管理员密码输入框中即可（一般为一串加密的hash值）</li>
<li>新手入门-可选择安装推荐的插件（也可选择自定义插件）</li>
<li>创建第一个管理员用户</li>
<li><p>实例配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Jenkins URL: http:<span class="comment">//服务器ip:7199</span></span><br><span class="line">Jenkins URL 用于给各种Jenkins资源提供绝对路径链接的根地址。 这意味着对于很多Jenkins特色是需要正确设置的，例如：邮件通知、PR状态更新以及提供给构建步骤的BUILD_URL环境变量。</span><br><span class="line">推荐的默认值显示在尚未保存，如果可能的话这是根据当前请求生成的。 最佳实践是要设置这个值，用户可能会需要用到。这将会避免在分享或者查看链接时的困惑。</span><br></pre></td></tr></table></figure>
</li>
<li><p>Jenkins已就绪-开始使用Jenkins</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>使用node.js+socket.io+koa+reactjs搭建WebSocket简单的实时通信</title>
    <url>/2019/04/19/%E6%90%AD%E5%BB%BAWebSocket%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%9E%E6%97%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="使用node-js-socket-io-koa-reactjs搭建WebSocket简单的实时通信"><a href="#使用node-js-socket-io-koa-reactjs搭建WebSocket简单的实时通信" class="headerlink" title="使用node.js+socket.io+koa+reactjs搭建WebSocket简单的实时通信"></a>使用node.js+socket.io+koa+reactjs搭建WebSocket简单的实时通信</h2><h4 id="本篇相关github代码地址"><a href="#本篇相关github代码地址" class="headerlink" title="本篇相关github代码地址"></a>本篇相关github代码地址</h4><p>服务端地址：<a href="https://github.com/niexq/webSocketTest" target="_blank" rel="noopener">https://github.com/niexq/webSocketTest</a></p>
<p>客户端地址：<a href="https://github.com/niexq/websocketClientTest" target="_blank" rel="noopener">https://github.com/niexq/websocketClientTest</a></p>
<h4 id="1-服务器端相关配置"><a href="#1-服务器端相关配置" class="headerlink" title="1.服务器端相关配置"></a>1.服务器端相关配置</h4><p>1.1 安装<a href="https://github.com/koajs/koa" target="_blank" rel="noopener">koa</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save koa</span><br></pre></td></tr></table></figure></p>
<p>1.2 安装<a href="https://github.com/socketio/socket.io" target="_blank" rel="noopener">socket.io</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save socket.io</span><br></pre></td></tr></table></figure></p>
<p>1.3 index.js简略代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(&apos;colors&apos;);</span><br><span class="line">const Koa = require(&apos;koa&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line">const server = require(&apos;http&apos;).createServer(app.callback());</span><br><span class="line">const io = require(&apos;socket.io&apos;)(server);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.of(&apos;/chat&apos;).on(&apos;connection&apos;, function(socket) &#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    socket.emit(&apos;request&apos;, /* */); // emit an event to the socket</span><br><span class="line">    </span><br><span class="line">    socket.on(&apos;reply&apos;, function()&#123; /* */ &#125;); // listen to the event</span><br><span class="line">    </span><br><span class="line">    socket.emit(&apos;news&apos;, &#123; hello: &apos;world&apos; &#125;);</span><br><span class="line">    </span><br><span class="line">    socket.on(&apos;my other event&apos;, function (data) &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(8899);</span><br><span class="line">console.error(&apos;websocket test server start&apos;.green);</span><br></pre></td></tr></table></figure></p>
<h5 id="2-客户端相关配置"><a href="#2-客户端相关配置" class="headerlink" title="2.客户端相关配置"></a>2.客户端相关配置</h5><p>2.1 可直接用<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a>或<a href="https://ant.design/docs/react/use-with-create-react-app-cn" target="_blank" rel="noopener">ant方式</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx create-react-app websocket-client-test</span><br><span class="line"></span><br><span class="line">cd websocket-client-test</span><br><span class="line"></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure></p>
<p>2.2. 安装<a href="https://github.com/socketio/socket.io-client" target="_blank" rel="noopener">socket.io-client</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save socket.io-client</span><br></pre></td></tr></table></figure></p>
<p>2.3 封装WebSocket组件，在应用入口js中引入</p>
<p>WebSocket.js<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default class WebSocket extends Component &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>App.js<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default class App extends Component &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    render () &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                ...</span><br><span class="line">                &lt;WebSocket /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>lib/websocket.js,websocket相关方法封装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import io from &apos;socket.io-client&apos;;</span><br><span class="line">import _ from &apos;lodash&apos;;</span><br><span class="line">import &#123; getCurrentUser &#125; from &apos;./utils&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; Socket &#125; from &apos;dgram&apos;;</span><br><span class="line"></span><br><span class="line">const env = process.env.NODE_ENV || &apos;development&apos;;</span><br><span class="line">const config = require(`./config.$&#123;env&#125;`);</span><br><span class="line"></span><br><span class="line">export const CHATWEBSOCKET = &apos;CHATWEBSOCKET&apos;</span><br><span class="line">export const NEWSWEBSOCKET = &apos;NEWSWEBSOCKET&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const chatWebSocket = io(config.chatWebSocket,&#123;</span><br><span class="line">  autoConnect: false</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const newsWebSocket = io(config.newsWebSocket,&#123;</span><br><span class="line">  autoConnect: false</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export function chatSocketBind(cb)&#123;</span><br><span class="line">  console.error(&apos;~~~~~chatWebSocket&apos;, chatWebSocket);</span><br><span class="line">  if(!chatWebSocket.connected) chatWebSocket.open();</span><br><span class="line"></span><br><span class="line">  // 把当前用户名称发给服务器缓存下来，然后服务器给指定用户发信息(按业务需要，可以把当前用户信息包括token信息发给服务器缓存下来，然后服务器给指定用户发信息)</span><br><span class="line">  const &#123; id, token &#125; = getCurrentUser();</span><br><span class="line">  if(!id || !token) return;</span><br><span class="line">  chatWebSocket.emit(&apos;chatSocketBind&apos;, id, token);</span><br><span class="line"></span><br><span class="line">  // 绑定chat服务器发来的notify消息</span><br><span class="line">  if(_.isFunction(cb)) chatWebSocket.on(&apos;notify&apos;, (...args) =&gt; cb(...args));</span><br><span class="line"></span><br><span class="line">  // chatWebSocket.emit(&apos;firstMessageType&apos;, &apos;嗨，我要建立websocket协议，需要chat服务&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function newsSocketBind(cb)&#123;</span><br><span class="line">  if(!newsWebSocket.connected) newsWebSocket.open();</span><br><span class="line"></span><br><span class="line">  // 把当前用户名称发给服务器缓存下来，然后服务器给指定用户发信息</span><br><span class="line">  const &#123; id, token &#125; = getCurrentUser();</span><br><span class="line">  if(!id || !token) return;</span><br><span class="line">  newsWebSocket.emit(&apos;newsSocketBind&apos;, id, token);</span><br><span class="line"></span><br><span class="line">  // 绑定news服务器发来的notify消息</span><br><span class="line">  if(_.isFunction(cb)) newsWebSocket.on(&apos;notify&apos;, (...args) =&gt; cb(...args));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function sendMessage(&#123; serviceType, messageType, message &#125;) &#123;</span><br><span class="line">  const &#123; id, name, token &#125; = getCurrentUser();</span><br><span class="line">  if(!id || !token) return;</span><br><span class="line"></span><br><span class="line">  switch(serviceType) &#123;</span><br><span class="line">    case CHATWEBSOCKET:</span><br><span class="line">      chatWebSocket.emit(messageType, id, name, message);</span><br><span class="line">      break;</span><br><span class="line">    case NEWSWEBSOCKET:</span><br><span class="line">      newsWebSocket.emit(messageType, id, name, message);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3.最终操作效果图<br><img src="https://github.com/niexq/niexqStatic/blob/master/websocket/websocketTest.png?raw=true" alt="png1"></p>
<h4 id="篇外：HTML5-WebSocket"><a href="#篇外：HTML5-WebSocket" class="headerlink" title="篇外：HTML5 WebSocket"></a>篇外：HTML5 WebSocket</h4><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p>
<p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>
<p>在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p>
<p>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p>
<p>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2016/03/ws.png" alt="png"></p>
<h5 id="有关更多详细信息，请参阅："><a href="#有关更多详细信息，请参阅：" class="headerlink" title="有关更多详细信息，请参阅："></a>有关更多详细信息，请参阅：</h5><p><a href="https://socket.io/docs" target="_blank" rel="noopener">socket.io</a></p>
<p><a href="http://www.runoob.com/html/html5-websocket.html" target="_blank" rel="noopener">HTML5 WebSocket</a></p>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>Reactjs</tag>
        <tag>socket.io</tag>
        <tag>koa</tag>
      </tags>
  </entry>
  <entry>
    <title>在CentOS7系统使用Docker构建Jenkins</title>
    <url>/2021/02/08/%E5%9C%A8CentOS7%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8Docker%E6%9E%84%E5%BB%BAgitlab/</url>
    <content><![CDATA[<h2 id="在CentOS7系统使用Docker构建gitlab"><a href="#在CentOS7系统使用Docker构建gitlab" class="headerlink" title="在CentOS7系统使用Docker构建gitlab"></a>在CentOS7系统使用Docker构建gitlab</h2><p>详情可参照<a href="https://docs.gitlab.com/omnibus/docker/#troubleshooting" target="_blank" rel="noopener">官方安装连接</a>，以下只记录一些关键步骤</p>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>假设docker已安装的前提下,如需了解CentOS7系统安装Docker，可参照笔记ecs操作部分步骤-<a href="https://help.aliyun.com/document_detail/51853.html?spm=a2c4g.11186623.4.1.20aa4c07DdFvHb" target="_blank" rel="noopener">阿里ECS安装docker</a>或<a href="https://docs.docker.com/install/" target="_blank" rel="noopener">docker官方安装</a></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li>需要了解docker基本命令操作</li>
<li>登录ecs服务器，创建jenkins挂载目录</li>
<li><a href="https://hub.docker.com/r/gitlab/gitlab-ce" target="_blank" rel="noopener">登录dockerhub</a>,选择官方社区版本及阅读说明文档；也可使用docker search -s 100 ‘gitlab’直接搜索gitlab镜像start大于100的</li>
</ul>
<h3 id="设置卷位置"><a href="#设置卷位置" class="headerlink" title="设置卷位置"></a>设置卷位置</h3><p>在设置其他所有内容之前，请配置一个新的环境变量$GITLAB_HOME ，该变量指向配置，日志和数据文件将驻留的目录。确保目录存在并且已授予适当的权限。</p>
<p>对于Linux用户，将路径设置为/srv/gitlab：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> GITLAB_HOME=<span class="regexp">/srv/gi</span>tlab</span><br></pre></td></tr></table></figure></p>
<p>对于macOS用户，请使用用户$HOME/gitlab目录：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> GITLAB_HOME=$HOME/gitlab</span><br></pre></td></tr></table></figure></p>
<p>Linux，macOS查看环境变量<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">env</span><br></pre></td></tr></table></figure></p>
<p>GitLab容器使用主机安装的卷来存储持久数据：</p>
<table>
<thead>
<tr>
<th>当前位置</th>
<th>容器位置</th>
<th>用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>$GITLAB_HOME/data</td>
<td>/var/opt/gitlab</td>
<td>用于存储应用程序数据。</td>
</tr>
<tr>
<td>$GITLAB_HOME/logs</td>
<td>/var/log/gitlab</td>
<td>用于存储日志。</td>
</tr>
<tr>
<td>$GITLAB_HOME/config</td>
<td>/etc/gitlab</td>
<td>用于存储GitLab配置文件。</td>
</tr>
</tbody>
</table>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>GitLab Docker镜像可以多种方式运行：</p>
<ul>
<li><a href="https://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-engine" target="_blank" rel="noopener">使用Docker引擎</a></li>
<li><a href="https://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose" target="_blank" rel="noopener">使用Docker Compose</a></li>
<li><a href="https://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-swarm-mode" target="_blank" rel="noopener">使用Docker群模式</a></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.从docker镜像仓库拉取最新的gitlab（一般选择lts，长期支持的版本，会定时发布系统更新）（https://hub.docker.com/r/gitlab/gitlab-ce）</span></span><br><span class="line">docker pull gitlab/gitlab-ce</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.查看已安装的docker gitlab</span></span><br><span class="line">docker images | grep <span class="string">"gitlab"</span></span><br></pre></td></tr></table></figure>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 官方配置</span></span><br><span class="line">docker run --detach \</span><br><span class="line">  --hostname gitlab.example.com \                       <span class="comment">// 域名</span></span><br><span class="line">  --publish <span class="number">443</span>:<span class="number">443</span> \                                   <span class="comment">// 将容器内443端口映射至宿主机6003端口，这是访问gitlab的端口</span></span><br><span class="line">  --publish <span class="number">80</span>:<span class="number">80</span> \                                     <span class="comment">// 将容器内80端口映射至宿主机80端口，这是访问gitlab的端口</span></span><br><span class="line">  --publish <span class="number">22</span>:<span class="number">22</span> \                                     <span class="comment">// 将容器内22端口映射至宿主机22端口，这是访问ssh的端口</span></span><br><span class="line">  --name gitlab \                                       <span class="comment">// 容器名称</span></span><br><span class="line">  --restart always \                                    <span class="comment">// 容器自启动</span></span><br><span class="line">  --volume $GITLAB_HOME/config:<span class="regexp">/etc/gi</span>tlab \            <span class="comment">// 见上"设置卷位置录"</span></span><br><span class="line">  --volume $GITLAB_HOME/logs:<span class="regexp">/var/</span>log/gitlab \          <span class="comment">// 见上"设置卷位置录"</span></span><br><span class="line">  --volume $GITLAB_HOME/data:<span class="regexp">/var/</span>opt/gitlab \          <span class="comment">// 见上"设置卷位置录"</span></span><br><span class="line">  gitlab/gitlab-ce:latest                               <span class="comment">// 安装的镜像包名 REPOSITORY:TAG（也可写镜像ID）</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 简化版</span></span><br><span class="line">docker run --detach --hostname bot.xiaoqiang.tech --publish <span class="number">7143</span>:<span class="number">443</span> --publish <span class="number">7280</span>:<span class="number">80</span> --publish <span class="number">7322</span>:<span class="number">22</span> --name gitlab --restart always --volume $GITLAB_HOME/config:<span class="regexp">/etc/gi</span>tlab --volume $GITLAB_HOME/logs:<span class="regexp">/var/</span>log/gitlab --volume $GITLAB_HOME/data:<span class="regexp">/var/</span>opt/gitlab gitlab/gitlab-ce:latest</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看运行的容器</span></span><br><span class="line">docker container ls </span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<h3 id="修改gitlab配置"><a href="#修改gitlab配置" class="headerlink" title="修改gitlab配置"></a>修改gitlab配置</h3><p>输入正在运行的容器：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker exec -it gitlab /bin/bash</span><br></pre></td></tr></table></figure></p>
<p>打开gitlab.rb配置文件<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 此文件是全注释的，所以直接在首行添加如下配置</span></span><br><span class="line">  </span><br><span class="line"># gitlab访问地址，可以写域名（默认端口为80）</span><br><span class="line">external_url <span class="string">'http://192.168.52.128:9980'</span></span><br><span class="line"># ssh主机ip</span><br><span class="line">gitlab_rails[<span class="string">'gitlab_ssh_host'</span>] = <span class="string">'192.168.52.128'</span></span><br><span class="line"># ssh连接端口</span><br><span class="line">gitlab_rails[<span class="string">'gitlab_shell_ssh_port'</span>] = <span class="number">7322</span></span><br></pre></td></tr></table></figure></p>
<p>/etc/gitlab/gitlab.rb用您的编辑器打开并设置external_url：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># For HTTP</span><br><span class="line">external_url <span class="string">"http://gitlab.example.com:8929"</span></span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line"># For HTTPS (notice the https)</span><br><span class="line">external_url <span class="string">"https://gitlab.example.com:8929"</span></span><br></pre></td></tr></table></figure></p>
<p>此URL中指定的端口必须与Docker发布到主机的端口匹配。此外，如果未显式设置NGINX侦听端口 nginx[‘listen_port’]，它将从中拉出external_url。有关更多信息，请参见<a href="https://docs.gitlab.com/omnibus/settings/nginx.html" target="_blank" rel="noopener">NGINX文档</a>。</p>
<p>设置gitlab_shell_ssh_port：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gitlab_rails[<span class="string">'gitlab_shell_ssh_port'</span>] = <span class="number">7322</span></span><br></pre></td></tr></table></figure>
<p>重启修改后的配置<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></p>
<p>最后，重启gitlab<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure></p>
<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>按照上面的示例，您将能够从Web浏览器下访问GitLab，<hostip>:8929并在port下使用SSH进行推送2289。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本地访问（忽略）</span></span><br><span class="line">http:<span class="comment">//loalhost:8929</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 局域网访问（注意：可查看域名配置-设置白名单笔记，配置安全组规则，允许8929入方向）</span></span><br><span class="line">http:<span class="comment">//服务器ip:8929</span></span><br></pre></td></tr></table></figure></hostip></p>
<h3 id="其他，安装gitlab后设置后期补充"><a href="#其他，安装gitlab后设置后期补充" class="headerlink" title="其他，安装gitlab后设置后期补充"></a>其他，安装gitlab后设置后期补充</h3>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>将React APP部署到GitHub Pages</title>
    <url>/2021/03/03/%E5%B0%86React%20APP%E9%83%A8%E7%BD%B2%E5%88%B0GitHub%20Pages/</url>
    <content><![CDATA[<h2 id="将React-APP部署到GitHub-Pages"><a href="#将React-APP部署到GitHub-Pages" class="headerlink" title="将React APP部署到GitHub Pages"></a>将React APP部署到GitHub Pages</h2><p>参考<a href="https://github.com/gitname/react-gh-pages" target="_blank" rel="noopener">react-gh-pages</a>以及<a href="https://create-react-app.dev/docs/deployment/#github-pages" target="_blank" rel="noopener">create-react-app-Deployment-GitHub Pages</a></p>
<p><img src="/images/react-gh-pages.png" alt="react-gh-pages"><br><!-- # <img src="/logo.png" title="react-gh-pages" alt="react-gh-pages logo" width="530"> --></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>前提：本地已安装nodejs，已有github账户</p>
<ul>
<li><a href="#step1">1.在GitHub上创建一个空的repository</a></li>
<li><a href="#step2">2.使用create-react-app创建新的React应用</a></li>
<li><a href="#step3">3.重要，添加homepage到package.json</a></li>
<li><a href="#step4">4.重要，安装gh-pages并添加deploy到package.json的scripts中</a></li>
<li><a href="#step5">5.重要，将GitHub存储库添加为本地git存储库中的remote</a></li>
<li><a href="#step6">6.重要，通过运行<strong>npm run deploy</strong>部署到GitHub Pages</a></li>
<li><a href="#step7">7.对于项目页面，请确保项目设置使用<strong>gh-pages</strong></a></li>
<li><a href="#step8">8.可选，配置域</a></li>
<li><a href="#step9">9.可选，将本地源代码提交推送到GitHub的<strong>master</strong>分支</a></li>
<li><a href="#step10">10.可选，故障排除</a></li>
</ul>
<h3 id="1-在GitHub上创建一个空的repository"><a href="#1-在GitHub上创建一个空的repository" class="headerlink" title="1.在GitHub上创建一个空的repository"></a><span id="step1">1.在GitHub上<a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-new-repository" target="_blank" rel="noopener">创建一个空的repository</a></span></h3><ul>
<li>输入自定义的Repository name</li>
<li>其他为空，不用初始化README.md，.gitignore，license，保持repository干净无文件</li>
</ul>
<h3 id="2-使用create-react-app创建新的React应用"><a href="#2-使用create-react-app创建新的React应用" class="headerlink" title="2.使用create-react-app创建新的React应用"></a><span id="step2">2.使用<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app创建新的React应用</a></span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// npx</span></span><br><span class="line">npx create-react-app react-gh-pages</span><br><span class="line"></span><br><span class="line"><span class="comment">// or npm</span></span><br><span class="line">npm init react-app react-gh-pages</span><br><span class="line"></span><br><span class="line"><span class="comment">// or yarn</span></span><br><span class="line">yarn create react-app react-gh-pages</span><br></pre></td></tr></table></figure>
<h3 id="3-重要，添加homepage到package-json"><a href="#3-重要，添加homepage到package-json" class="headerlink" title="3.重要，添加homepage到package.json"></a><span id="step3">3.<strong>重要</strong>，添加homepage到package.json</span></h3><p>打开项目，然后为项目package.json添加一个homepage字段：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"homepage"</span>: <span class="string">"https://myusername.github.io/react-gh-pages"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或GitHub用户页面</span></span><br><span class="line"><span class="string">"homepage"</span>: <span class="string">"https://myusername.github.io"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或自定义域页面：</span></span><br><span class="line"><span class="string">"homepage"</span>: <span class="string">"https://mywebsite.com"</span>,</span><br></pre></td></tr></table></figure></p>
<p>Create React App使用该homepage字段来确定所构建的HTML文件中的根URL。</p>
<h3 id="4-重要，安装gh-pages并添加deploy到package-json的scripts中"><a href="#4-重要，安装gh-pages并添加deploy到package-json的scripts中" class="headerlink" title="4.重要，安装gh-pages并添加deploy到package.json的scripts中"></a><span id="step4">4.<strong>重要</strong>，安装gh-pages并添加deploy到package.json的scripts中</span></h3><p>进入项目，安装gh-pages<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cd react-gh-pages</span><br><span class="line">npm install gh-pages --save-dev</span><br></pre></td></tr></table></figure></p>
<p>添加以下deploy脚本到项目的package.json中：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">+   <span class="string">"predeploy"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">+   <span class="string">"deploy"</span>: <span class="string">"gh-pages -d build"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br></pre></td></tr></table></figure></p>
<p>该predeploy脚本将自动运行在deploy运行之前。</p>
<p>（可忽略）如果要部署到GitHub用户页面而不是项目页面，则需要进行其他修改：</p>
<p>调整package.json脚本以将部署推送到master：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"predeploy"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">-   <span class="string">"deploy"</span>: <span class="string">"gh-pages -d build"</span>,</span><br><span class="line">+   <span class="string">"deploy"</span>: <span class="string">"gh-pages -b master -d build"</span>,</span><br></pre></td></tr></table></figure></p>
<h3 id="5-重要，将GitHub存储库添加为本地git存储库中的remote"><a href="#5-重要，将GitHub存储库添加为本地git存储库中的remote" class="headerlink" title="5.重要，将GitHub存储库添加为本地git存储库中的remote"></a><span id="step5">5.<strong>重要</strong>，将GitHub存储库添加为本地git存储库中的remote</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git remote add origin https:<span class="comment">//github.com/myusername/react-gh-pages.git</span></span><br></pre></td></tr></table></figure>
<h3 id="6-重要，通过运行npm-run-deploy部署到GitHub-Pages"><a href="#6-重要，通过运行npm-run-deploy部署到GitHub-Pages" class="headerlink" title="6.重要，通过运行npm run deploy部署到GitHub Pages"></a><span id="step6">6.<strong>重要</strong>，通过运行<strong>npm run deploy</strong>部署到GitHub Pages</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure>
<h3 id="7-对于项目页面，请确保项目设置使用gh-pages"><a href="#7-对于项目页面，请确保项目设置使用gh-pages" class="headerlink" title="7.对于项目页面，请确保项目设置使用gh-pages"></a><span id="step7">7.对于项目页面，请确保项目设置使用<strong>gh-pages</strong></span></h3><p>确保将GitHub项目设置中的<strong>GitHub Pages</strong>选项设置为使用<strong>gh-pages</strong>分支：</p>
<p><img src="/images/gh-pages-settings.gif" alt="gh-pages-settings"><br><img src="/images/gh-pages-settings.png" alt="gh-pages-settings"></p>
<h3 id="8-可选，配置域"><a href="#8-可选，配置域" class="headerlink" title="8.可选，配置域"></a><span id="step8">8.<strong>可选</strong>，<a href="https://docs.github.com/en/github/working-with-github-pages/about-custom-domains-and-github-pages#supported-custom-domains" target="_blank" rel="noopener">配置域</a></span></h3><p>可以通过新增<strong>CNAME</strong>文件到<strong>public/</strong>目录来使用GitHub Pages配置自定义域。</p>
<p>CNAME文件应如下所示：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mywebsite.com</span><br></pre></td></tr></table></figure></p>
<h3 id="9-可选，将本地源代码提交推送到GitHub的master分支"><a href="#9-可选，将本地源代码提交推送到GitHub的master分支" class="headerlink" title="9.可选，将本地源代码提交推送到GitHub的master分支"></a><span id="step9">9.<strong>可选</strong>，将本地源代码提交推送到GitHub的<strong>master</strong>分支</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"feat: Create a React app and publish it to GitHub Pages"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<h3 id="10-可选，故障排除"><a href="#10-可选，故障排除" class="headerlink" title="10.可选，故障排除"></a><span id="step10">10.<strong>可选</strong>，故障排除</span></h3><ul>
<li><p>如果在部署时遇到<strong>/dev/tty: No such a device or address</strong>错误或类似错误，请尝试以下操作：</p>
<ul>
<li>创建一个新的<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">个人访问令牌</a></li>
<li><strong>git remote set-url origin https://<user>:<token>@github.com/<user>/<repo></repo></user></token></user></strong></li>
<li>再运行<strong>npm run deploy</strong></li>
</ul>
</li>
<li><p>如果在部署时获得<strong>Cannot read property ‘email’ of null</strong>，请尝试以下操作：</p>
<ul>
<li><strong>git config –global user.name ‘&lt;your_name&gt;’</strong></li>
<li><strong>git config –global user.email ‘&lt;your_email&gt;’</strong></li>
<li>再运行<strong>npm run deploy</strong></li>
</ul>
</li>
</ul>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a><span>最后</span></h3><p>如果操作了第7步配置了自定义域名域名，可访问：<a href="https://mywebsite.com/react-gh-pages" target="_blank" rel="noopener">https://mywebsite.com/react-gh-pages</a></p>
<p>如未配置域名，访问：<a href="https://myusername.github.io/react-gh-pages" target="_blank" rel="noopener">https://myusername.github.io/react-gh-pages</a></p>
<p>也可通过GitHub-settings-GitHub Pages查看：</p>
<p><img src="/images/website.png" alt="website"></p>
]]></content>
      <categories>
        <category>Reactjs</category>
      </categories>
      <tags>
        <tag>Reactjs</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将文件从Docker容器复制到主机？</title>
    <url>/2021/02/08/%E5%A6%82%E4%BD%95%E5%B0%86%E6%96%87%E4%BB%B6%E4%BB%8EDocker%E5%AE%B9%E5%99%A8%E5%A4%8D%E5%88%B6%E5%88%B0%E4%B8%BB%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="如何将文件从Docker容器复制到主机？"><a href="#如何将文件从Docker容器复制到主机？" class="headerlink" title="如何将文件从Docker容器复制到主机？"></a>如何将文件从Docker容器复制到主机？</h2><p>详细说明及使用可参考<a href="https://docs.docker.com/engine/reference/commandline/cp/" target="_blank" rel="noopener">官方docker  cp文档</a></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>在容器和本地文件系统之间复制文件/文件夹</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">$ docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br></pre></td></tr></table></figure>
<p>例如，docker正在运行了一个jenkins，CONTAINER ID为3a3d34f3a3c0，接下来以此容器做展示：</p>
<table>
<thead>
<tr>
<th>CONTAINER ID</th>
<th>IMAGE</th>
<th>其他略</th>
<th>NAMES</th>
</tr>
</thead>
<tbody>
<tr>
<td>3a3d34f3a3c0</td>
<td>docker.io/jenkins/jenkins:lts</td>
<td>其他略</td>
<td>jenkins</td>
</tr>
</tbody>
</table>
<p>注：以下命令中使用 CONTAINER ID 的地方也可用 NAMES 代替</p>
<h3 id="容器到主机"><a href="#容器到主机" class="headerlink" title="容器到主机"></a>容器到主机</h3><p>将文件或文件夹从Docker容器复制到本地文件系统。</p>
<blockquote>
<p>重要：此种有两种情况需要区分，第一种你在主机，第二种你已经进入了docker jenkins容器中</p>
</blockquote>
<ul>
<li>第一种：在主机<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 将jenkins容器中 /var/jenkins_home/project1 目录拷贝到主机的 /srv/jenkins</span><br><span class="line">$ docker cp <span class="number">3</span>a3d34f3a3c0:<span class="regexp">/var/</span>jenkins_home/project1 /srv/jenkins</span><br><span class="line"></span><br><span class="line"># 将jenkins容器中 /var/jenkins_home/project1 目录中 README.md 文件拷贝到主机的 /srv/jenkins</span><br><span class="line">$ docker cp <span class="number">3</span>a3d34f3a3c0:<span class="regexp">/var/</span>jenkins_home/project1/README.md /srv/jenkins</span><br><span class="line"></span><br><span class="line"># 将jenkins容器中 /var/jenkins_home/project1/build 目录中所有文件拷贝到主机的 /srv/jenkins/www</span><br><span class="line">$ docker cp <span class="number">3</span>a3d34f3a3c0:<span class="regexp">/var/</span>jenkins_home/project1/build/. /srv/jenkins/www</span><br><span class="line"></span><br><span class="line"># 将jenkins容器中 /var/jenkins_home/project1/build 目录中 README.md 文件拷贝到当前本地工作目录</span><br><span class="line">$ docker cp <span class="number">3</span>a3d34f3a3c0:<span class="regexp">/var/</span>jenkins_home/project1/build/README.md .</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>如果容器中不存在复制的目录或文件，则报错</p>
<ul>
<li>第二种：已经进入了docker jenkins容器中（docker exec -it “3a3d34f3a3c0” bash）</li>
</ul>
<blockquote>
<p>将jenkins容器中/var/jenkins_home/workspace/project2/build中所有文件拷贝到主机的/srv/www中</p>
</blockquote>
<p>前置环境变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">export</span> JENKINS_HOME=<span class="regexp">/srv/</span>jenkins</span><br><span class="line">$ <span class="keyword">export</span> NGINX_WWW=<span class="regexp">/srv/</span>www</span><br></pre></td></tr></table></figure>
<p>需要借助<a href="https://docs.docker.com/engine/reference/commandline/run/" target="_blank" rel="noopener">docker run –volume</a>，docker jenkins启动命令需要改成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ docker run --name jenkins -u root -d -p <span class="number">7199</span>:<span class="number">8080</span> -p <span class="number">50000</span>:<span class="number">50000</span> -v $JENKINS_HOME:<span class="regexp">/var/</span>jenkins_home -v $NGINX_WWW:<span class="regexp">/srv/</span>www docker.io/jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>
<p>重要：额外增加了一个参数 <figure class="highlight plain"><figcaption><span>$NGINX_WWW:/srv/www``` 挂载目录</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">最后，直接执行即可</span><br><span class="line">```js</span><br><span class="line">$ cp -rf /var/jenkins_home/workspace/project2/build/. /srv/www/</span><br></pre></td></tr></table></figure></p>
<h3 id="主机到容器"><a href="#主机到容器" class="headerlink" title="主机到容器"></a>主机到容器</h3><p>将文件或文件夹从本地文件系统复制到Docker容器，其工作原理相同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 将主机的 /srv/jenkins 拷贝到jenkins容器中 /var/jenkins_home/project1 目录</span><br><span class="line">$ docker cp /srv/jenkins  <span class="number">3</span>a3d34f3a3c0:<span class="regexp">/var/</span>jenkins_home/project1</span><br><span class="line"></span><br><span class="line"># 将主机的 /srv/jenkins 目录中 README.md 拷贝到jenkins容器中 /var/jenkins_home/project1文件</span><br><span class="line">$ docker cp /srv/jenkins/README.md <span class="number">3</span>a3d34f3a3c0:<span class="regexp">/var/</span>jenkins_home/project1</span><br><span class="line"></span><br><span class="line"># 将主机的 /srv/jenkins/www 中所有文件拷贝到jenkins容器中 /var/jenkins_home/project1/build 目录</span><br><span class="line">$ docker cp /srv/jenkins/www/. <span class="number">3</span>a3d34f3a3c0:<span class="regexp">/var/</span>jenkins_home/project1/build</span><br><span class="line"></span><br><span class="line"># 将当前本地工作目录拷贝到jenkins容器中 /var/jenkins_home/project1/build 目录中</span><br><span class="line">$ docker cp . <span class="number">3</span>a3d34f3a3c0:<span class="regexp">/var/</span>jenkins_home/project1/build</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>运算符优先级</title>
    <url>/2019/03/08/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<hr>
<h4 id="运算符优先级-运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。"><a href="#运算符优先级-运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。" class="headerlink" title="运算符优先级 运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">运算符优先级</a> 运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。</h4><p>问题：(row.FHSL || 0 - row.RKSL || 0) what?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(null || 0 - 2 || -3)</span><br><span class="line">// -2</span><br><span class="line">(null || 2 - 2 || -3)</span><br><span class="line">// -3</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>基于qiankun微前端实战+部署粗略笔记（跳过原理）</title>
    <url>/2021/04/28/%E5%9F%BA%E4%BA%8Eqiankun%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98+%E9%83%A8%E7%BD%B2%E7%B2%97%E7%95%A5%E7%AC%94%E8%AE%B0%EF%BC%88%E8%B7%B3%E8%BF%87%E5%8E%9F%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<h2 id="基于qiankun微前端实战-部署粗略笔记（跳过原理）"><a href="#基于qiankun微前端实战-部署粗略笔记（跳过原理）" class="headerlink" title="基于qiankun微前端实战+部署粗略笔记（跳过原理）"></a>基于qiankun微前端实战+部署粗略笔记（跳过原理）</h2><p>因业务需要，以下文字纯个人qiankun实战学习笔记，不谈原理只记操作过程，内容难免有纰漏部分，敬请不吝赐教批评指正。</p>
<p><img src="https://i.loli.net/2021/04/23/BN6E45ZCUxtLhFX.gif" alt></p>
<h3 id="目标场景"><a href="#目标场景" class="headerlink" title="目标场景"></a>目标场景</h3><p><img src="https://i.loli.net/2021/04/27/RQycNgEzJBv5Som.png" alt></p>
<h3 id="预备知识点"><a href="#预备知识点" class="headerlink" title="预备知识点"></a>预备知识点</h3><ul>
<li>已对<a href="https://qiankun.umijs.org/" target="_blank" rel="noopener">qiankun</a>微前端有了初步认识;</li>
<li>熟悉<a href="https://react.docschina.org/" target="_blank" rel="noopener">react</a>、<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vuejs</a>;</li>
<li>了解<a href="https://github.com/" target="_blank" rel="noopener">github</a>、<a href="https://www.docker.com/" target="_blank" rel="noopener">docker</a>、<a href="https://www.jenkins.io/" target="_blank" rel="noopener">jenkins</a>、<a href="http://nginx.org/" target="_blank" rel="noopener">nginx</a>;</li>
</ul>
<h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><h4 id="基座"><a href="#基座" class="headerlink" title="基座"></a>基座</h4><ul>
<li>使用<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a>初始化项目;</li>
<li><p>安装<figure class="highlight plain"><figcaption><span>"^2.4.0"```;</span></figcaption><table><tr><td class="code"><pre><span class="line">+ 代码地址：[react-app-qiankun-main](https://github.com/niexq/react-app-qiankun-main);</span><br><span class="line">+ 独立仓库，独立部署，独立域名：https://qiankun.xiaoqiang.tech;</span><br><span class="line"></span><br><span class="line">#### react子应用</span><br><span class="line">+ 使用[create-react-app](https://github.com/facebook/create-react-app)初始化项目;</span><br><span class="line">+ 安装```&quot;react-app-rewired&quot;: &quot;^2.1.8&quot;```、```&quot;react-router-dom&quot;: &quot;^5.2.0&quot;```;</span><br><span class="line">+ 代码地址：[react-app-qiankun-sub](https://github.com/niexq/react-app-qiankun-sub);</span><br><span class="line">+ 独立仓库，独立部署，独立域名：https://react.xiaoqiang.tech;</span><br><span class="line"></span><br><span class="line">#### vue子应用</span><br><span class="line">+ 使用[vue-cli](https://github.com/vuejs/vue-cli)初始化项目，对应```&quot;vue&quot;: &quot;^3.0.0&quot;```;</span><br><span class="line">+ 安装```&quot;vue-router&quot;: &quot;^4.0.0-beta.11&quot;```;</span><br><span class="line">+ 代码地址：[vue-cli-qiankun-sub](https://github.com/niexq/vue-cli-qiankun-sub);</span><br><span class="line">+ 独立仓库，独立部署，独立域名：https://vue.xiaoqiang.tech;</span><br><span class="line"></span><br><span class="line">### 快速上手</span><br><span class="line"></span><br><span class="line">#### 基座</span><br><span class="line"></span><br><span class="line">+ 1.初始化项目</span><br><span class="line">```bash</span><br><span class="line">npm init react-app react-app-qiankun-main</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>2.安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```bash</span><br><span class="line">yarn add qiankun # 或者 npm i qiankun -S</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>3.目录结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">react-app-qiankun-main</span><br><span class="line">├── .env.local             <span class="comment">// 本地环境</span></span><br><span class="line">├── .env.development.local <span class="comment">// 测试环境</span></span><br><span class="line">├── .env.production.local  <span class="comment">// 生产环境</span></span><br><span class="line">├── README.md</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── .gitignore</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── manifest.json</span><br><span class="line">└── src</span><br><span class="line">    ├── components</span><br><span class="line">    │     └── Loading.jsx</span><br><span class="line">    ├── store</span><br><span class="line">    │     └── store.js    <span class="comment">// 主应用的全局状态</span></span><br><span class="line">    ├── apps.js           <span class="comment">// 子应用配置</span></span><br><span class="line">    ├── App.css</span><br><span class="line">    ├── App.js            <span class="comment">// 基座布局，挂载子应用</span></span><br><span class="line">    ├── App.test.js</span><br><span class="line">    ├── index.css</span><br><span class="line">    ├── index.js          <span class="comment">// 主应用中注册微应用</span></span><br><span class="line">    ├── logo.svg</span><br><span class="line">    ├── reportWebVitals.js</span><br><span class="line">    └── setupTests.js</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="基座（开撸代码）"><a href="#基座（开撸代码）" class="headerlink" title="基座（开撸代码）"></a>基座（开撸代码）</h4><ul>
<li><p>新增3个<a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener">.env</a>文件，主要配置不同环境的对应的域名</p>
<ul>
<li><p>.env/.env.development.local（此处暂未区分本地和测试的域名，所有环境变量值都保持一致）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">REACT_APP_SUB_REACT=<span class="comment">//localhost:2233/react</span></span><br><span class="line">REACT_APP_SUB_VUE=<span class="comment">//localhost:3344/vue</span></span><br><span class="line">PORT=<span class="number">1122</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>.env.production.local （生产环境）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">REACT_APP_SUB_REACT = <span class="comment">//qiankun.xiaoqiang.tech/react</span></span><br><span class="line">REACT_APP_SUB_VUE = <span class="comment">//qiankun.xiaoqiang.tech/vue</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>修改index.html挂载dom的默认id，防止与子应用id冲突</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认root =&gt; main-root</span></span><br><span class="line">&lt;div id=<span class="string">"main-root"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新增<a href="https://github.com/niexq/react-app-qiankun-main/blob/main/src/store/store.js" target="_blank" rel="noopener">store/store.js</a>，配置主应用的全局状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initGlobalState &#125; <span class="keyword">from</span> <span class="string">'qiankun'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  user: &#123;</span><br><span class="line">    name: <span class="string">'qiankun'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = initGlobalState(initialState);</span><br><span class="line"></span><br><span class="line">actions.onGlobalStateChange(<span class="function">(<span class="params">state, prev</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> state) &#123;</span><br><span class="line">    initialState[key] = state[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非官方api，https://github.com/umijs/qiankun/pull/729</span></span><br><span class="line">actions.getGlobalState = <span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> key ? initialState[key] : initialState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> actions;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<a href="https://github.com/niexq/react-app-qiankun-main/blob/main/src/App.js" target="_blank" rel="noopener">src/App.js</a>，主要完成基座页面布局及增加挂载子应用的dom（id=”subapp-viewport”）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...省略，详细可见源码</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div className=<span class="string">"mainapp"</span>&gt;</span><br><span class="line">        &#123;<span class="comment">/* 标题栏 */</span>&#125;</span><br><span class="line">        &lt;header className=<span class="string">"mainapp-header"</span>&gt;</span><br><span class="line">          &lt;ul className=<span class="string">"mainapp-header-sidemenu"</span>&gt;</span><br><span class="line">            &#123;<span class="comment">/* 侧边栏 省略，详细可见源码 */</span>&#125;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>header&gt;</span><br><span class="line">        &lt;div className=<span class="string">"mainapp-main"</span>&gt;</span><br><span class="line">          &#123;<span class="comment">/* 子应用 */</span>&#125;</span><br><span class="line">          &lt;main id=<span class="string">"subapp-viewport"</span>&gt;&lt;<span class="regexp">/main&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>增加<a href="https://github.com/niexq/react-app-qiankun-main/blob/main/src/apps.js" target="_blank" rel="noopener">apps.js</a>，子应用的配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/store'</span></span><br><span class="line"><span class="keyword">const</span> microApps = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'react'</span>,</span><br><span class="line">    entry: process.env.REACT_APP_SUB_REACT,</span><br><span class="line">    activeRule: <span class="string">'/react'</span>,</span><br><span class="line">    container: <span class="string">'#subapp-viewport'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'vue'</span>,</span><br><span class="line">    entry: process.env.REACT_APP_SUB_VUE,</span><br><span class="line">    activeRule: <span class="string">'/vue'</span>,</span><br><span class="line">    container: <span class="string">'#subapp-viewport'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apps = microApps.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...item,</span><br><span class="line">    props: &#123;</span><br><span class="line">      routerBase: item.activeRule,</span><br><span class="line">      getGlobalState: store.getGlobalState,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> apps</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<a href="https://github.com/niexq/react-app-qiankun-main/blob/main/src/index.js" target="_blank" rel="noopener">src/index.js</a>，主应用中注册微（子）应用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start, setDefaultMountApp &#125; <span class="keyword">from</span> <span class="string">'qiankun'</span>;</span><br><span class="line"><span class="keyword">import</span> apps <span class="keyword">from</span> <span class="string">'./apps'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">&#123; appContent, loading &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'main-root'</span>);</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;React.StrictMode&gt;</span><br><span class="line">      &lt;App loading=&#123;loading&#125; content=&#123;appContent&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/React.StrictMode&gt;,</span></span><br><span class="line"><span class="regexp">    container,</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const loader = loading =&gt; render(&#123; loading &#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">render(&#123; loading: true &#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const microApps = apps.map((app =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">  ...app,</span></span><br><span class="line"><span class="regexp">  loader,</span></span><br><span class="line"><span class="regexp">&#125;)))</span></span><br><span class="line"><span class="regexp">registerMicroApps(microApps, &#123;</span></span><br><span class="line"><span class="regexp">  beforeLoad: app =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    console.log('before load app.name=====&gt;&gt;&gt;&gt;&gt;', app.name)</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  beforeMount: [</span></span><br><span class="line"><span class="regexp">    app =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      console.log('[LifeCycle] before mount %c%s', 'color: green;', app.name)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  ],</span></span><br><span class="line"><span class="regexp">  afterMount: [</span></span><br><span class="line"><span class="regexp">    app =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      console.log('[LifeCycle] after mount %c%s', 'color: green;', app.name)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  ],</span></span><br><span class="line"><span class="regexp">  afterUnmount: [</span></span><br><span class="line"><span class="regexp">    app =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      console.log('[LifeCycle] after unmount %c%s', 'color: green;', app.name)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  ]</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">setDefaultMountApp('/</span>react<span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">start();</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>本地启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="react子应用"><a href="#react子应用" class="headerlink" title="react子应用"></a>react子应用</h4><ul>
<li><p>1.初始化项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init react-app react-app-qiankun-sub</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```bash</span><br><span class="line">npm i react-app-rewired --save-dev</span><br><span class="line">npm i react-router-dom --save</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>3.目录结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">react-app-qiankun-sub</span><br><span class="line">├── .env                 <span class="comment">// 本地环境</span></span><br><span class="line">├── config-overrides.js  <span class="comment">// 覆盖create-react-app的webpack配置</span></span><br><span class="line">├── README.md</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── .gitignore</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── manifest.json</span><br><span class="line">└── src</span><br><span class="line">    ├── components</span><br><span class="line">    │     └── LibVersion.jsx</span><br><span class="line">    ├── pages</span><br><span class="line">    │     └── Home.jsx</span><br><span class="line">    ├── public-path.js <span class="comment">// __webpack_public_path__</span></span><br><span class="line">    ├── App.css</span><br><span class="line">    ├── App.js         <span class="comment">// 子应用布局</span></span><br><span class="line">    ├── App.test.js</span><br><span class="line">    ├── index.css</span><br><span class="line">    ├── index.js       <span class="comment">// 子应用入口，挂载dom导出相应的生命周期钩子</span></span><br><span class="line">    ├── logo.svg</span><br><span class="line">    ├── reportWebVitals.js</span><br><span class="line">    └── setupTests.js</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="react子应用（开撸代码）"><a href="#react子应用（开撸代码）" class="headerlink" title="react子应用（开撸代码）"></a>react子应用（开撸代码）</h4><ul>
<li><p>新增1个<a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener">.env</a>文件，主要配置本地环境</p>
<p>此处PORT需要和基座<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```js</span><br><span class="line">  PORT=2233</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>修改index.html挂载dom的默认id，防止与基座及其他子应用id冲突</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认root =&gt; sub-react-root</span></span><br><span class="line">&lt;div id=<span class="string">"sub-react-root"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新增<a href="https://github.com/niexq/react-app-qiankun-sub/blob/main/src/public-path.js" target="_blank" rel="noopener">src/public-path.js</a>，<strong>webpack_public_path</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line no-undef</span></span><br><span class="line">  __webpack_public_path__ = <span class="built_in">window</span>.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<a href="https://github.com/niexq/react-app-qiankun-sub/blob/main/src/App.js" target="_blank" rel="noopener">src/App.js</a>，主要完成子应用页面布局（略，见源码）</p>
</li>
<li><p>修改<a href="https://github.com/niexq/react-app-qiankun-sub/blob/main/src/index.js" target="_blank" rel="noopener">src/index.js</a>，微（子）应用导出相应的生命周期钩子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./public-path'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSubRootContainer</span>(<span class="params">container</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> container ? container.querySelector(<span class="string">'#sub-react-root'</span>) : <span class="built_in">document</span>.querySelector(<span class="string">'#sub-react-root'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; container &#125; = props;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;React.StrictMode&gt;</span><br><span class="line">      &lt;App store=&#123;&#123;...props&#125;&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/React.StrictMode&gt;,</span></span><br><span class="line"><span class="regexp">    getSubRootContainer(container),</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function storeTest(props) &#123;</span></span><br><span class="line"><span class="regexp">  props.onGlobalStateChange((value, prev) =&gt; console.log(`[onGlobalStateChange - $&#123;props.name&#125;]:`, value, prev), true);</span></span><br><span class="line"><span class="regexp">  props.setGlobalState(&#123;</span></span><br><span class="line"><span class="regexp">    ignore: props.name,</span></span><br><span class="line"><span class="regexp">    user: &#123;</span></span><br><span class="line"><span class="regexp">      name: props.name,</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">  &#125;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">if (!window.__POWERED_BY_QIANKUN__) &#123;</span></span><br><span class="line"><span class="regexp">  render(&#123;&#125;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export async function bootstrap() &#123;</span></span><br><span class="line"><span class="regexp">  console.log('react app bootstraped');</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export async function mount(props) &#123;</span></span><br><span class="line"><span class="regexp">  console.log('props from main framework', props);</span></span><br><span class="line"><span class="regexp">  storeTest(props);</span></span><br><span class="line"><span class="regexp">  render(props);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export async function unmount(props) &#123;</span></span><br><span class="line"><span class="regexp">  const &#123; container &#125; = props;</span></span><br><span class="line"><span class="regexp">  ReactDOM.unmountComponentAtNode(getSubRootContainer(container));</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>增加<a href="https://github.com/niexq/react-app-qiankun-sub/blob/main/config-overrides.js" target="_blank" rel="noopener">config-overrides.js</a>，覆盖create-react-app的webpack配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name &#125; = <span class="built_in">require</span>(<span class="string">'./package'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  webpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.output.library = <span class="string">`<span class="subst">$&#123;name&#125;</span>-[name]`</span>;</span><br><span class="line">    config.output.libraryTarget = <span class="string">'umd'</span>;</span><br><span class="line">    config.output.jsonpFunction = <span class="string">`webpackJsonp_<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: <span class="function">(<span class="params">configFunction</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">proxy, allowedHost</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> config = configFunction(proxy, allowedHost);</span><br><span class="line">      config.historyApiFallback = <span class="literal">true</span>;</span><br><span class="line">      config.open = <span class="literal">false</span>;</span><br><span class="line">      config.hot = <span class="literal">false</span>;</span><br><span class="line">      config.watchContentBase = <span class="literal">false</span>;</span><br><span class="line">      config.liveReload = <span class="literal">false</span>;</span><br><span class="line">      config.headers = &#123;</span><br><span class="line">        <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改package.json</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  -   <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">  +   <span class="string">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line">  -   <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">  +   <span class="string">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line">  -   <span class="string">"test"</span>: <span class="string">"react-scripts test"</span>,</span><br><span class="line">  +   <span class="string">"test"</span>: <span class="string">"react-app-rewired test"</span>,</span><br><span class="line">  <span class="string">"eject"</span>: <span class="string">"react-scripts eject"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="vue子应用"><a href="#vue子应用" class="headerlink" title="vue子应用"></a>vue子应用</h4><ul>
<li><p>1.初始化项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli-service-global</span><br><span class="line">vue create vue-cli-qiankun-sub</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```bash</span><br><span class="line">npm i vue-router --save</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>3.目录结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vue-cli-qiankun-sub</span><br><span class="line">├── .env                 <span class="comment">// 本地环境</span></span><br><span class="line">├── vue.config.js        <span class="comment">// vue可选的配置文件</span></span><br><span class="line">├── babel.config.js</span><br><span class="line">├── README.md</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── .gitignore</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── manifest.json</span><br><span class="line">└── src</span><br><span class="line">    ├── components</span><br><span class="line">    │    └── HelloWorld.vue</span><br><span class="line">    ├── router</span><br><span class="line">    │     └── index.js</span><br><span class="line">    ├── views</span><br><span class="line">    │     └── Home.vue</span><br><span class="line">    ├── public-path.js  <span class="comment">// __webpack_public_path__</span></span><br><span class="line">    ├── App.vue         <span class="comment">// 子应用布局</span></span><br><span class="line">    └── main.js         <span class="comment">// 子应用入口，挂载dom导出相应的生命周期钩子</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="vue子应用（开撸代码）"><a href="#vue子应用（开撸代码）" class="headerlink" title="vue子应用（开撸代码）"></a>vue子应用（开撸代码）</h4><ul>
<li><p>新增1个<a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener">.env</a>文件，主要配置本地环境</p>
<p>此处PORT需要和基座<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```js</span><br><span class="line">  PORT=3344</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>修改index.html挂载dom的默认id，防止与基座及其他子应用id冲突</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认root =&gt; sub-vue-root</span></span><br><span class="line">&lt;div id=<span class="string">"sub-vue-roott"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新增<a href="https://github.com/niexq/vue-cli-qiankun-sub/blob/main/src/public-path.js" target="_blank" rel="noopener">src/public-path.js</a>，<strong>webpack_public_path</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line no-undef</span></span><br><span class="line">  __webpack_public_path__ = <span class="built_in">window</span>.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<a href="https://github.com/niexq/vue-cli-qiankun-sub/blob/main/src/App.vue" target="_blank" rel="noopener">src/App.vue</a>，主要完成子应用页面布局（略，见源码）</p>
</li>
<li><p>修改<a href="https://github.com/niexq/vue-cli-qiankun-sub/blob/main/src/main.js" target="_blank" rel="noopener">src/mian.js</a>，微（子）应用导出相应的生命周期钩子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./public-path'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./router'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> history = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">props = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; container &#125; = props;</span><br><span class="line">  history = createWebHistory(<span class="built_in">window</span>.__POWERED_BY_QIANKUN__ ? <span class="string">'/vue'</span> : <span class="string">'/'</span>);</span><br><span class="line">  router = createRouter(&#123;</span><br><span class="line">    history,</span><br><span class="line">    routes,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  instance = createApp(App);</span><br><span class="line">  instance.use(router);</span><br><span class="line">  instance.use(store);</span><br><span class="line">  instance.mount(container ? container.querySelector(<span class="string">'#sub-vue-root'</span>) : <span class="string">'#sub-vue-root'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;</span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'%c '</span>, <span class="string">'color: green;'</span>, <span class="string">'vue3.0 app bootstraped'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">storeTest</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  props.onGlobalStateChange &amp;&amp;</span><br><span class="line">    props.onGlobalStateChange(</span><br><span class="line">      (value, prev) =&gt; <span class="built_in">console</span>.log(<span class="string">`[onGlobalStateChange - <span class="subst">$&#123;props.name&#125;</span>]:`</span>, value, prev),</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">    );</span><br><span class="line">  props.setGlobalState &amp;&amp;</span><br><span class="line">    props.setGlobalState(&#123;</span><br><span class="line">      ignore: props.name,</span><br><span class="line">      user: &#123;</span><br><span class="line">        name: props.name,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">mount</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  storeTest(props);</span><br><span class="line">  render(props);</span><br><span class="line">  instance.config.globalProperties.$onGlobalStateChange = props.onGlobalStateChange;</span><br><span class="line">  instance.config.globalProperties.$setGlobalState = props.setGlobalState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">unmount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  instance.unmount();</span><br><span class="line">  instance._container.innerHTML = <span class="string">''</span>;</span><br><span class="line">  instance = <span class="literal">null</span>;</span><br><span class="line">  router = <span class="literal">null</span>;</span><br><span class="line">  history.destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加<a href="https://github.com/niexq/vue-cli-qiankun-sub/blob/main/vue.config.js" target="_blank" rel="noopener">vue.config.js</a>配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; name &#125; = <span class="built_in">require</span>(<span class="string">'./package'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  outputDir: <span class="string">'dist'</span>,</span><br><span class="line">  assetsDir: <span class="string">'static'</span>,</span><br><span class="line">  filenameHashing: <span class="literal">true</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">    port,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: <span class="literal">false</span>,</span><br><span class="line">      errors: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义webpack配置</span></span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">      <span class="comment">// 把子应用打包成 umd 库格式</span></span><br><span class="line">      library: <span class="string">`<span class="subst">$&#123;name&#125;</span>-[name]`</span>,</span><br><span class="line">      libraryTarget: <span class="string">'umd'</span>,</span><br><span class="line">      jsonpFunction: <span class="string">`webpackJsonp_<span class="subst">$&#123;name&#125;</span>`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改package.json</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  +   <span class="string">"start"</span>: <span class="string">"vue-cli-service serve"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>以上操作完后，可以直接通过基座预览，子应用也可独立预览</p>
<h4 id="基座预览"><a href="#基座预览" class="headerlink" title="基座预览"></a>基座预览</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:1122/</span></span><br></pre></td></tr></table></figure>
<h4 id="react子应用预览"><a href="#react子应用预览" class="headerlink" title="react子应用预览"></a>react子应用预览</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:2233/</span></span><br></pre></td></tr></table></figure>
<h4 id="vue子应用预览"><a href="#vue子应用预览" class="headerlink" title="vue子应用预览"></a>vue子应用预览</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:3344/</span></span><br></pre></td></tr></table></figure>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p><img src="https://i.loli.net/2021/04/27/g3iASuJNbG5pU7F.jpg" alt></p>
<h4 id="备选方案"><a href="#备选方案" class="headerlink" title="备选方案"></a>备选方案</h4><ul>
<li><p>1.单域名部署；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基座：https://qiankun.xiaoqiang.tech</span></span><br><span class="line"><span class="comment">// react子应用：https://qiankun.xiaoqiang.tech/react</span></span><br><span class="line"><span class="comment">// vue子应用：https://qiankun.xiaoqiang.tech/vue</span></span><br><span class="line"><span class="comment">// 编译后服务器存储目录</span></span><br><span class="line">react-app-qiankun</span><br><span class="line">├── main</span><br><span class="line">│   └── index.html</span><br><span class="line">├── react</span><br><span class="line">│   └── index.html</span><br><span class="line">└── vue</span><br><span class="line">    └── index.html</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.多域名独立部署；（当篇笔记选择了多域名部署）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基座：https://qiankun.xiaoqiang.tech</span></span><br><span class="line"><span class="comment">// 编译后服务器项目独立存储目录</span></span><br><span class="line">react-app-qiankun-main</span><br><span class="line">  └── index.html</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// react子应用：https://react.xiaoqiang.tech</span></span><br><span class="line"><span class="comment">// 编译后服务器项目独立存储目录</span></span><br><span class="line">react-app-qiankun-sub</span><br><span class="line">  └── index.html</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue子应用：https://vue.xiaoqiang.tech</span></span><br><span class="line"><span class="comment">// 编译后服务器项目独立存储目录</span></span><br><span class="line">react-app-qiankun-main</span><br><span class="line">└── index.html</span><br></pre></td></tr></table></figure>
<h4 id="部署（以下只初略记录部署过程，过于简陋）"><a href="#部署（以下只初略记录部署过程，过于简陋）" class="headerlink" title="部署（以下只初略记录部署过程，过于简陋）"></a>部署（以下只初略记录部署过程，过于简陋）</h4><ul>
<li><p>前提：已购云服务器，并已安装<a href="https://help.aliyun.com/document_detail/51853.html?spm=a2c4g.11186623.4.1.20aa4c07DdFvHb" target="_blank" rel="noopener">docker</a>、<a href="https://hub.docker.com/_/nginx" target="_blank" rel="noopener">nginx</a>、<a href="https://www.jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">jenkins</a>、3个独立域名及ssl证书</p>
</li>
<li><p>本地编码，github存储代码，分别<a href="https://github.com/new" target="_blank" rel="noopener">新建3个公开代码库</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基座：react-app-qiankun-main 存储到 https://github.com/niexq/react-app-qiankun-main</span></span><br><span class="line"><span class="comment">// react子应用：react-app-qiankun-sub 存储到 https://github.com/niexq/react-app-qiankun-sub</span></span><br><span class="line"><span class="comment">// vue子应用：vue-cli-qiankun-sub 存储到 https://github.com/niexq/vue-cli-qiankun-sub</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://www.cloudbees.com/blog/better-integration-between-jenkins-and-github-github-jenkins-plugin" target="_blank" rel="noopener">github,jenkins持续集成</a></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 详细配置步骤略</span></span><br><span class="line"><span class="comment">// github webHooks设置</span></span><br><span class="line"><span class="comment">// jenkins构建部分执行shell</span></span><br><span class="line">BUILD_ID=dontKillMe</span><br><span class="line">cd /<span class="keyword">var</span>/jenkins_home/workspace/react-app-qiankun-main</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line">rm -rf /srv/www/react-app-qiankun-main</span><br><span class="line">cp -rf /<span class="keyword">var</span>/jenkins_home/workspace/react-app-qiankun-main/build /srv/www/react-app-qiankun-main/</span><br></pre></td></tr></table></figure>
<ul>
<li>使用nginx代理<br>nginx.conf<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">user root;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    #include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name qiankun.xiaoqiang.tech; # 你的域名</span><br><span class="line">        ssl on;</span><br><span class="line">        root www/react-app-qiankun-main; # 前台文件存放文件夹，可改成别的</span><br><span class="line">        index index.html index.htm; # 上面配置的文件夹里面的index.html</span><br><span class="line">        ssl_certificate cert/5543142_qiankun.xiaoqiang.tech.pem;   #将domain name.pem替换成您证书的文件名。</span><br><span class="line">        ssl_certificate_key cert/5543142_qiankun.xiaoqiang.tech.key;   #将domain name.key替换成您证书的密钥文件名。</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        location / &#123;</span><br><span class="line">          # 用于配合 browserHistory使用</span><br><span class="line">          try_files $uri $uri/ /index.html;</span><br><span class="line">          # root /srv/www/react-app-qiankun-main;</span><br><span class="line">          # index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name react.xiaoqiang.tech; # 你的域名</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';</span><br><span class="line">        add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';</span><br><span class="line">        if ($request_method = 'OPTIONS') &#123;</span><br><span class="line">            return 204;</span><br><span class="line">        &#125;</span><br><span class="line">        ssl on;</span><br><span class="line">        root www/react-app-qiankun-sub; # 前台文件存放文件夹，可改成别的</span><br><span class="line">        index index.html index.htm; # 上面配置的文件夹里面的index.html</span><br><span class="line">        ssl_certificate cert/4325684_react.xiaoqiang.tech.pem;   #将domain name.pem替换成您证书的文件名。</span><br><span class="line">        ssl_certificate_key cert/4325684_react.xiaoqiang.tech.key;   #将domain name.key替换成您证书的密钥文件名。</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        location / &#123;</span><br><span class="line">          # 用于配合 browserHistory使用</span><br><span class="line">          try_files $uri $uri/ /index.html;</span><br><span class="line">          # root /srv/www/react-app-qiankun-sub;</span><br><span class="line">          # index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name vue.xiaoqiang.tech; # 你的域名</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';</span><br><span class="line">        add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';</span><br><span class="line">        if ($request_method = 'OPTIONS') &#123;</span><br><span class="line">            return 204;</span><br><span class="line">        &#125;</span><br><span class="line">        ssl on;</span><br><span class="line">        root www/vue-cli-qiankun-sub; # 前台文件存放文件夹，可改成别的</span><br><span class="line">        index index.html index.htm; # 上面配置的文件夹里面的index.html</span><br><span class="line">        ssl_certificate cert/5556275_vue.xiaoqiang.tech.pem;   #将domain name.pem替换成您证书的文件名。</span><br><span class="line">        ssl_certificate_key cert/5556275_vue.xiaoqiang.tech.key;   #将domain name.key替换成您证书的密钥文件名。</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        location / &#123;</span><br><span class="line">          # 用于配合 browserHistory使用</span><br><span class="line">          try_files $uri $uri/ /index.html;</span><br><span class="line">          # root /srv/www/vue-cli-qiankun-sub;</span><br><span class="line">          # index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>docker运行nginx命令，重点关注<figure class="highlight plain"><figcaption><span>挂载目录```</span></figcaption><table><tr><td class="code"><pre><span class="line">```bash</span><br><span class="line">docker run --name nginx -p 80:80 -p 443:443 -v /root/nginx/config/nginx.conf:/etc/nginx/nginx.conf -v /root/nginx/cert:/etc/nginx/cert -v /root/nginx/logs:/var/log/nginx -v /srv/www/react-app-qiankun-main:/etc/nginx/www/react-app-qiankun-main -v /srv/www/react-app-qiankun-sub:/etc/nginx/www/react-app-qiankun-sub -v /srv/www/vue-cli-qiankun-sub:/etc/nginx/www/vue-cli-qiankun-sub --restart=always -d nginx:stable</span><br></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>没有总结，遇到的问题太多，笔记总结的太杂，后期再整理分享</p>
<h4 id="线上预览地址：https-qiankun-xiaoqiang-tech"><a href="#线上预览地址：https-qiankun-xiaoqiang-tech" class="headerlink" title="线上预览地址：https://qiankun.xiaoqiang.tech"></a>线上预览地址：<a href="https://qiankun.xiaoqiang.tech" target="_blank" rel="noopener">https://qiankun.xiaoqiang.tech</a></h4><h4 id="子应用线上也可独立预览"><a href="#子应用线上也可独立预览" class="headerlink" title="子应用线上也可独立预览"></a>子应用线上也可独立预览</h4><p>react子应用预览：<a href="https://react.xiaoqiang.tech" target="_blank" rel="noopener">https://react.xiaoqiang.tech</a></p>
<p>vue子应用预览：<a href="https://vue.xiaoqiang.tech" target="_blank" rel="noopener">https://vue.xiaoqiang.tech</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://qiankun.umijs.org/" target="_blank" rel="noopener">qiankun</a></p>
<p><a href="https://juejin.cn/post/6875462470593904653" target="_blank" rel="noopener">qiankun-example</a></p>
<p><a href="https://juejin.cn/post/6844904185910018062" target="_blank" rel="noopener">qiankun 微前端方案实践及总结</a></p>
]]></content>
      <categories>
        <category>Reactjs</category>
      </categories>
      <tags>
        <tag>Reactjs</tag>
        <tag>qiankun</tag>
      </tags>
  </entry>
  <entry>
    <title>序列化接口入参到query中</title>
    <url>/2019/03/13/%E5%BA%8F%E5%88%97%E5%8C%96%E6%8E%A5%E5%8F%A3%E5%85%A5%E5%8F%82%E5%88%B0query%E4%B8%AD/</url>
    <content><![CDATA[<h4 id="请求接口时，序列化参数到query中，只支持2层数据-如果多层，需要使用递归-，如果参数中有undefined，会将其删除"><a href="#请求接口时，序列化参数到query中，只支持2层数据-如果多层，需要使用递归-，如果参数中有undefined，会将其删除" class="headerlink" title="请求接口时，序列化参数到query中，只支持2层数据(如果多层，需要使用递归)，如果参数中有undefined，会将其删除"></a>请求接口时，序列化参数到query中，只支持2层数据(如果多层，需要使用递归)，如果参数中有undefined，会将其删除</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const stringify = (params = &#123;&#125;) =&gt; &#123;</span><br><span class="line">  const copyParams = params;</span><br><span class="line">  Object.keys(copyParams).forEach((k) =&gt; &#123;</span><br><span class="line">    if ((_.isObject(copyParams[k]) || _.isArray(copyParams[k])) &amp;&amp; !_.isEmpty(copyParams[k])) &#123;</span><br><span class="line">      copyParams[k] = JSON.stringify(copyParams[k]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  const newParams = JSON.parse(JSON.stringify(copyParams));</span><br><span class="line">  return qs.stringify(newParams);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Nodejs</tag>
        <tag>Fetch</tag>
      </tags>
  </entry>
  <entry>
    <title>浅记koa的洋葱模型实现</title>
    <url>/2019/04/25/%E6%B5%85%E8%AE%B0koa%E7%9A%84%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="浅记koa的洋葱模型实现"><a href="#浅记koa的洋葱模型实现" class="headerlink" title="浅记koa的洋葱模型实现"></a>浅记<a href="https://github.com/koajs" target="_blank" rel="noopener">koa</a>的洋葱模型实现</h2><h4 id="本篇相关github代码地址"><a href="#本篇相关github代码地址" class="headerlink" title="本篇相关github代码地址"></a>本篇相关github代码地址</h4><p>github地址：<a href="https://github.com/niexq/koaComposeTest" target="_blank" rel="noopener">https://github.com/niexq/koaComposeTest</a></p>
<h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>Koa 是一个新的 web 框架，由 Express 幕后的原班人马打造， 致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。 通过利用 async 函数，Koa 帮你丢弃回调函数，并有力地增强错误处理。 Koa 并没有捆绑任何中间件， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。</p>
<h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h4><p>Koa 依赖 node v7.6.0 或 ES2015及更高版本和 async 方法支持.</p>
<p>你可以使用自己喜欢的版本管理器快速安装支持的 node 版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm install 7</span><br><span class="line">npm i koa</span><br><span class="line">node my-koa-app.js</span><br></pre></td></tr></table></figure>
<h4 id="3-中间件执行的洋葱模型"><a href="#3-中间件执行的洋葱模型" class="headerlink" title="3.中间件执行的洋葱模型"></a>3.中间件执行的洋葱模型</h4><p><img src="/images/koaCompose2.png" alt="洋葱模型"></p>
<h4 id="4-中间件级联"><a href="#4-中间件级联" class="headerlink" title="4.中间件级联"></a>4.中间件级联</h4><p>Koa 中间件以更传统的方式级联。对比 Connect 的实现，通过一系列功能直接传递控制，直到一个返回，Koa 调用“下游”，然后控制流回“上游”。</p>
<h4 id="5-疑问点："><a href="#5-疑问点：" class="headerlink" title="5.疑问点："></a>5.疑问点：</h4><ul>
<li>中间件如何加载</li>
<li>中间件执行顺序</li>
<li>next是啥</li>
<li>context如何传递</li>
</ul>
<h4 id="6-koa中间件执行代码"><a href="#6-koa中间件执行代码" class="headerlink" title="6.koa中间件执行代码"></a>6.koa中间件执行代码</h4><p>下面以 “Hello World” 的响应作为示例，当请求开始时首先请求流通过四个中间件，然后继续移交控制给 response 中间件。当一个中间件调用 next() 则该函数暂停并将控制传递给定义的下一个中间件。当在下游没有更多的中间件执行后，堆栈将展开并且每个中间件恢复执行其上游行为。</p>
<p>启动服务器代码index.js<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">require(&apos;colors&apos;);</span><br><span class="line">const Koa = require(&apos;koa2&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">const firstMiddleware = async (ctx, next) =&gt; &#123;</span><br><span class="line">  console.error(&apos;第一个中间件执行开始&apos;)</span><br><span class="line">  await next();</span><br><span class="line">  console.error(&apos;第一个中间件执行结束&apos;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const secondMiddleware = async (ctx, next) =&gt; &#123;</span><br><span class="line">  console.error(&apos;第二个中间件执行开始&apos;)</span><br><span class="line">  await next();</span><br><span class="line">  console.error(&apos;第二个中间件执行结束&apos;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const thirdMiddleware = async (ctx, next) =&gt; &#123;</span><br><span class="line">  console.error(&apos;第三个中间件执行开始&apos;)</span><br><span class="line">  await next();</span><br><span class="line">  console.error(&apos;第三个中间件执行结束&apos;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const fourthMiddleware = async (ctx, next) =&gt; &#123;</span><br><span class="line">  console.error(&apos;第四个中间件执行开始&apos;)</span><br><span class="line">  await next();</span><br><span class="line">  console.error(&apos;第四个中间件执行结束&apos;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(firstMiddleware)</span><br><span class="line"></span><br><span class="line">app.use(secondMiddleware)</span><br><span class="line"></span><br><span class="line">app.use(thirdMiddleware)</span><br><span class="line"></span><br><span class="line">app.use(fourthMiddleware)</span><br><span class="line"></span><br><span class="line">// response</span><br><span class="line">app.use(async (ctx, next) =&gt; &#123;</span><br><span class="line">  console.log(&apos;准备响应&apos;);</span><br><span class="line">  ctx.body = &apos;Hello World&apos;;</span><br><span class="line">  console.log(&apos;已响应&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.error(&apos;koa2 server start: &apos;.blue, &apos;http://localhost:3001&apos;.green);</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure></p>
<p>启动服务node index.js，浏览器中访问<a href="http://localhost:3001/" target="_blank" rel="noopener">http://localhost:3001/</a><br>访问后，在启动的服务命令窗口输出的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一个中间件执行开始</span><br><span class="line"></span><br><span class="line">第二个中间件执行开始</span><br><span class="line"></span><br><span class="line">第三个中间件执行开始</span><br><span class="line"></span><br><span class="line">第四个中间件执行开始</span><br><span class="line"></span><br><span class="line">准备响应</span><br><span class="line"></span><br><span class="line">已响应</span><br><span class="line"></span><br><span class="line">第四个中间件执行结束</span><br><span class="line"></span><br><span class="line">第三个中间件执行结束</span><br><span class="line"></span><br><span class="line">第二个中间件执行结束</span><br><span class="line"></span><br><span class="line">第一个中间件执行结束</span><br></pre></td></tr></table></figure>
<h4 id="7-源码分析"><a href="#7-源码分析" class="headerlink" title="7.源码分析"></a>7.源码分析</h4><blockquote>
<p>app.listen 创建node的<a href="https://nodejs.org/api/http.html" target="_blank" rel="noopener">http</a>服务</p>
</blockquote>
<p><strong>重点关注this.callback()，this.callback()生成node的http服务请求回调函数</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">listen(...args) &#123;</span><br><span class="line">  debug(&apos;listen&apos;);</span><br><span class="line">  const server = http.createServer(this.callback());</span><br><span class="line">  return server.listen(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>callback 返回node的http服务请求回调函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">callback() &#123;</span><br><span class="line">  const fn = compose(this.middleware);       // 重点关注此行代码</span><br><span class="line"></span><br><span class="line">  if (!this.listenerCount(&apos;error&apos;)) this.on(&apos;error&apos;, this.onerror);</span><br><span class="line"></span><br><span class="line">  const handleRequest = (req, res) =&gt; &#123;</span><br><span class="line">    const ctx = this.createContext(req, res);  // 此处创建context</span><br><span class="line">    return this.handleRequest(ctx, fn);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return handleRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>handleRequest 真正的请求回调函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">handleRequest(ctx, fnMiddleware) &#123;</span><br><span class="line">  const res = ctx.res;</span><br><span class="line">  res.statusCode = 404;</span><br><span class="line">  const onerror = err =&gt; ctx.onerror(err);</span><br><span class="line">  const handleResponse = () =&gt; respond(ctx);</span><br><span class="line">  onFinished(res, onerror);</span><br><span class="line">  return fnMiddleware(ctx).then(handleResponse).catch(onerror); // 此行代码也很关键</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>compose(this.middleware)，此行代码处理中间件，继续跟踪app.use方法</p>
<blockquote>
<p>app.use(function) 将给定的中间件方法添加到此应用程序</p>
</blockquote>
<p><a href="https://github.com/koajs/koa/blob/master/lib/application.js" target="_blank" rel="noopener">use方法源码</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use(fn) &#123;</span><br><span class="line">  ...</span><br><span class="line">  this.middleware.push(fn);</span><br><span class="line">  return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>app.use只负责将给定的中间件方法存入this.middleware数组中。</p>
<blockquote>
<p>compose 中间件合成</p>
</blockquote>
<p><a href="https://github.com/koajs/compose/blob/master/index.js" target="_blank" rel="noopener">koa-compose源码</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function compose (middleware) &#123;</span><br><span class="line">  return function (context, next) &#123;</span><br><span class="line">    // last called middleware #</span><br><span class="line">    let index = -1</span><br><span class="line">    return dispatch(0)</span><br><span class="line"></span><br><span class="line">    // 关键函数dispatch</span><br><span class="line">    function dispatch (i) &#123;</span><br><span class="line">      // 验证给定的中间件方法中，不能多次next()</span><br><span class="line">      if (i &lt;= index) return Promise.reject(new Error(&apos;next() called multiple times&apos;))</span><br><span class="line">      index = i</span><br><span class="line">      let fn = middleware[i]</span><br><span class="line">      if (i === middleware.length) fn = next;</span><br><span class="line">      if (!fn) return Promise.resolve()</span><br><span class="line">      try &#123;</span><br><span class="line">        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));</span><br><span class="line">      &#125; catch (err) &#123;</span><br><span class="line">        return Promise.reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>compose方法中，递归调用dispatch函数，它将遍历整个middleware，然后将context和dispatch(i + 1)传给middleware中的方法, 这里的dispatch(i + 1)就是中间件方法的第二个入参next，通过next巧妙的把下一个中间件fn作为next的返回值。</p>
<h4 id="8-疑问解答"><a href="#8-疑问解答" class="headerlink" title="8.疑问解答"></a>8.疑问解答</h4><p>至此就以上4点疑问就都可以解释了：</p>
<ul>
<li>中间件如何加载（通过app.use方法存入this.middleware数组中，然后通过compose方法串联）</li>
<li>中间件执行顺序（dispatch(0)，存在this.middleware数组里的中间件方法先进先执行，next()执行后转交下一中间件）</li>
<li>next是啥（next是一个以下一个中间件为返回值的方法）</li>
<li>context如何传递（context就在Promise.resolve(fn(context, dispatch.bind(null, i + 1)))一直传递）</li>
</ul>
<h4 id="9-结合洋葱模型，koa中间件执行效果"><a href="#9-结合洋葱模型，koa中间件执行效果" class="headerlink" title="9.结合洋葱模型，koa中间件执行效果"></a>9.结合洋葱模型，koa中间件执行效果</h4><p><img src="/images/koaCompose.png" alt="中间件执行效果图"></p>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>koa</tag>
        <tag>koa-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>操作update时报错不能更新from出来的数据</title>
    <url>/2019/03/13/%E6%93%8D%E4%BD%9Cupdate%E6%97%B6%E6%8A%A5%E9%94%99%E4%B8%8D%E8%83%BD%E6%9B%B4%E6%96%B0from%E5%87%BA%E6%9D%A5%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<blockquote>
<p>You can’t specify target table ‘xsdb’ for update in FROM clause<a href="https://blog.csdn.net/qq_29672495/article/details/72668008" target="_blank" rel="noopener">参考</a></p>
</blockquote>
<h4 id="错误写法总结：不能先select出同一表中的某些值，再update这个表-在同一语句中-，即不能依据某字段值做判断再来更新某字段的值"><a href="#错误写法总结：不能先select出同一表中的某些值，再update这个表-在同一语句中-，即不能依据某字段值做判断再来更新某字段的值" class="headerlink" title="错误写法总结：不能先select出同一表中的某些值，再update这个表(在同一语句中)，即不能依据某字段值做判断再来更新某字段的值"></a>错误写法总结：不能先select出同一表中的某些值，再update这个表(在同一语句中)，即不能依据某字段值做判断再来更新某字段的值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 根据条件批量更新逾期时间</span><br><span class="line">UPDATE XSDB set JSRQ = 1609430399999 where GUID in (</span><br><span class="line">  SELECT</span><br><span class="line">    -- FROM_UNIXTIME(xsd.JSRQ/1000, &apos;%Y-%m-%d %H:%i:%S&apos;) AS JSRQQ,</span><br><span class="line">    `xsd`.GUID</span><br><span class="line">    FROM</span><br><span class="line">    (</span><br><span class="line">      SELECT dqdd.CJJXSID, dqdd.SHJXSID FROM DDB dqdd WHERE dqdd.GUID = 906000029082</span><br><span class="line">    ) AS ydd,</span><br><span class="line">    `DDB` AS `dd`</span><br><span class="line">    INNER JOIN `XSDB` AS `xsd` ON `dd`.`GUID` = `xsd`.`DDID`</span><br><span class="line">    WHERE</span><br><span class="line">      `dd`.`CJJXSID` = ydd.CJJXSID</span><br><span class="line">      AND `dd`.`SHJXSID` = ydd.SHJXSID</span><br><span class="line">      AND `dd`.`DDZT` = &apos;1&apos;</span><br><span class="line">      AND `dd`.`DDLX` IN (1, 2, 9)</span><br><span class="line">      AND `dd`.`WSZJE` &gt;= 0</span><br><span class="line">      AND `dd`.`ZTBS` = &apos;E&apos;</span><br><span class="line">      AND `xsd`.`WSZJE` &gt;= 0</span><br><span class="line">      AND `xsd`.`JSRQ` &lt; UNIX_TIMESTAMP(NOW())*1000</span><br><span class="line">      AND `xsd`.`ZTBS` = &apos;E&apos;</span><br><span class="line">      AND `xsd`.`CWHXZT` = &apos;0&apos;</span><br><span class="line">      AND `xsd`.`ZJE` &gt; &apos;0&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="正确写法总结：将SELECT出的结果再通过中间表SELECT一遍，这样就规避了错误；需要注意的是，这个问题只出现于MySQL，MSSQL和Oracle不会出现此问题。"><a href="#正确写法总结：将SELECT出的结果再通过中间表SELECT一遍，这样就规避了错误；需要注意的是，这个问题只出现于MySQL，MSSQL和Oracle不会出现此问题。" class="headerlink" title="正确写法总结：将SELECT出的结果再通过中间表SELECT一遍，这样就规避了错误；需要注意的是，这个问题只出现于MySQL，MSSQL和Oracle不会出现此问题。"></a>正确写法总结：将SELECT出的结果再通过中间表SELECT一遍，这样就规避了错误；需要注意的是，这个问题只出现于MySQL，MSSQL和Oracle不会出现此问题。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 根据条件批量更新逾期时间</span><br><span class="line">UPDATE XSDB set JSRQ = 1609430399999 where GUID in (</span><br><span class="line">	select lsXSDB.GUID from (</span><br><span class="line">		SELECT</span><br><span class="line">			FROM_UNIXTIME(xsd.JSRQ/1000, &apos;%Y-%m-%d %H:%i:%S&apos;) AS JSRQQ,</span><br><span class="line">			`xsd`.*</span><br><span class="line">			FROM</span><br><span class="line">			(</span><br><span class="line">				SELECT dqdd.CJJXSID, dqdd.SHJXSID FROM DDB dqdd WHERE dqdd.GUID = 906000029082</span><br><span class="line">			) AS ydd,</span><br><span class="line">			`DDB` AS `dd`</span><br><span class="line">			INNER JOIN `XSDB` AS `xsd` ON `dd`.`GUID` = `xsd`.`DDID`</span><br><span class="line">			WHERE</span><br><span class="line">				`dd`.`CJJXSID` = ydd.CJJXSID</span><br><span class="line">				AND `dd`.`SHJXSID` = ydd.SHJXSID</span><br><span class="line">				AND `dd`.`DDZT` = &apos;1&apos;</span><br><span class="line">				AND `dd`.`DDLX` IN (1, 2, 9)</span><br><span class="line">				AND `dd`.`WSZJE` &gt;= 0</span><br><span class="line">				AND `dd`.`ZTBS` = &apos;E&apos;</span><br><span class="line">				AND `xsd`.`WSZJE` &gt;= 0</span><br><span class="line">				AND `xsd`.`JSRQ` &lt; UNIX_TIMESTAMP(NOW())*1000</span><br><span class="line">				AND `xsd`.`ZTBS` = &apos;E&apos;</span><br><span class="line">				AND `xsd`.`CWHXZT` = &apos;0&apos;</span><br><span class="line">				AND `xsd`.`ZJE` &gt; &apos;0&apos;</span><br><span class="line">	) lsXSDB</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>sql语句</tag>
      </tags>
  </entry>
</search>
